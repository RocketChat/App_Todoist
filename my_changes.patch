diff --git a/TodoistApp.ts b/TodoistApp.ts
index d5c3a94..38947ce 100644
--- a/TodoistApp.ts
+++ b/TodoistApp.ts
@@ -7,18 +7,31 @@ import { UIActionButtonContext } from '@rocket.chat/apps-engine/definition/ui';
 import { IUIKitResponse, UIKitActionButtonInteractionContext, UIKitBlockInteractionContext, UIKitViewSubmitInteractionContext } from '@rocket.chat/apps-engine/definition/uikit';
 import { IUser } from '@rocket.chat/apps-engine/definition/users';
 import { TodoistCommand } from './src/commands/TodoistCommand';
-import { MiscEnum } from './src/enums/Misc';
-import { ExecuteActionButtonHandler } from './src/handlers/actionButtonInteraction';
-import { ExecuteBlockActionHandler } from './src/handlers/blockInteraction';
-import { ExecuteViewSubmitHandler } from './src/handlers/viewSubmitInteraction';
+import { BlockActionEnum } from './src/enums/BlockAction';
+import { ExecuteActionButtonHandler } from './src/handlers/ExecuteActionButtonHandler';
+import { ExecuteBlockActionHandler } from './src/handlers/ExecuteBlockActionHandler';
+import { ExecuteViewSubmitHandler } from './src/handlers/ExecuteViewSubmitHandler';
 import { HttpHelper } from './src/helpers/http';
 import { isUserHighHierarchy, sendDirectMessage } from './src/helpers/message';
+import { LabelService } from './src/services/LabelService';
+import { TaskService } from './src/services/TaskService';
+import { ProjectService } from './src/services/ProjectService';
+import { SectionService } from './src/services/SectionService';
+import { SharedLabelService } from './src/services/SharedLabelService';
+import { CommentService } from './src/services/CommentService';
 
 export class TodoistApp extends App {
-    public readonly botUsername: string = 'todoist-app.bot';
     public botUser: IUser;
+    public readonly botUsername: string = 'todoist-app.bot';
     private readonly oauth2ClientInstance: IOAuth2Client;
     private httpHelperInstance: HttpHelper;
+    private labelService: LabelService;
+    private taskService: TaskService;
+    private projectService: ProjectService;
+    private sectionService: SectionService;
+    private sharedLabelService: SharedLabelService;
+    private commentService: CommentService;
+
     private oauth2Config: IOAuth2ClientOptions = {
       alias: 'todoist-app',
       accessTokenUri: 'https://todoist.com/oauth/access_token',
@@ -42,13 +55,8 @@ export class TodoistApp extends App {
 
     public async onInstall(context: IAppInstallationContext, read: IRead, http: IHttp, persistence: IPersistence, modify: IModify): Promise<void> {
         const user = context.user;
-
-        const quickReminder =
-            'Quick reminder: Let your team members know about the Todoist App,\
-                                so everyone will be able to manage their tasks.\n';
-
+        const quickReminder = 'Quick reminder: Let your team members know about the Todoist App, so everyone will be able to manage their tasks.\n';
         const text = `Welcome to the Todoist Rocket.Chat App!\n` + `To start managing your projects, tasks, etc. ` + `You first need to complete the app's setup and then authorize your Todoist account.\n` + `To do so, type  \`/todoist auth\`\n` + `${isUserHighHierarchy(user) ? quickReminder : ''}`;
-
         await sendDirectMessage({ read: read, modify: modify, user: user, message: text, persistence: persistence });
     }
 
@@ -56,6 +64,48 @@ export class TodoistApp extends App {
         return this.oauth2ClientInstance;
     }
 
+    public getLabelService(): LabelService {
+        if (!this.labelService) {
+        this.labelService = new LabelService(this);
+        }
+        return this.labelService;
+    }
+
+    public getTaskService(): TaskService {
+        if (!this.taskService) {
+        this.taskService = new TaskService(this);
+        }
+        return this.taskService;
+    }
+
+    public getProjectService(): ProjectService {
+        if (!this.projectService) {
+        this.projectService = new ProjectService(this);
+        }
+        return this.projectService;
+    }
+
+    public getSectionService(): SectionService {
+        if (!this.sectionService) {
+            this.sectionService = new SectionService(this);
+        }
+        return this.sectionService;
+    }
+    
+    public getSharedLabelService(): SharedLabelService {
+        if (!this.sharedLabelService) {
+            this.sharedLabelService = new SharedLabelService(this);
+        }
+        return this.sharedLabelService;
+    }
+    
+    public getCommentService(): CommentService {
+        if (!this.commentService) {
+            this.commentService = new CommentService(this);
+        }
+        return this.commentService;
+    }
+
     public getHttpHelperInstance(): HttpHelper {
         if (!this.httpHelperInstance) {
             this.httpHelperInstance = new HttpHelper(this, this.getAccessors().http);
@@ -78,14 +128,12 @@ export class TodoistApp extends App {
         return handler.run(context);
     }
 
-
     public async extendConfiguration(configuration: IConfigurationExtend): Promise<void> {    
         await Promise.all([this.getOauth2ClientInstance().setup(configuration), configuration.slashCommands.provideSlashCommand(new TodoistCommand(this))]);
         configuration.ui.registerButton({
-			actionId: MiscEnum.CREATE_TASK_FROM_MESSAGE_BUTTON_ACTION_ID,
-			labelI18n: MiscEnum.CREATE_TASK_FROM_MESSAGE_BUTTON,
+			actionId: BlockActionEnum.CREATE_TASK_FROM_MESSAGE_BUTTON_ACTION_ID,
+			labelI18n: BlockActionEnum.CREATE_TASK_FROM_MESSAGE_BUTTON,
 			context: UIActionButtonContext.MESSAGE_ACTION,
 		});
     }
-
 }
\ No newline at end of file
diff --git a/package-lock.json b/package-lock.json
index 6181d25..46d2551 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -1,5 +1,5 @@
 {
-    "name": "todoist",
+    "name": "App_Todoist",
     "lockfileVersion": 3,
     "requires": true,
     "packages": {
@@ -23,6 +23,7 @@
             "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.26.2.tgz",
             "integrity": "sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "@babel/helper-validator-identifier": "^7.25.9",
                 "js-tokens": "^4.0.0",
@@ -33,13 +34,14 @@
             }
         },
         "node_modules/@babel/generator": {
-            "version": "7.26.3",
-            "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.26.3.tgz",
-            "integrity": "sha512-6FF/urZvD0sTeO7k6/B15pMLC4CHUv1426lzr3N01aHJTl046uCAh9LXW/fzeXXjPNCJ6iABW5XaWOsIZB93aQ==",
+            "version": "7.26.5",
+            "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.26.5.tgz",
+            "integrity": "sha512-2caSP6fN9I7HOe6nqhtft7V4g7/V/gfDsC3Ag4W7kEzzvRGKqiv0pu0HogPiZ3KaVSoNDhUws6IJjDjpfmYIXw==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
-                "@babel/parser": "^7.26.3",
-                "@babel/types": "^7.26.3",
+                "@babel/parser": "^7.26.5",
+                "@babel/types": "^7.26.5",
                 "@jridgewell/gen-mapping": "^0.3.5",
                 "@jridgewell/trace-mapping": "^0.3.25",
                 "jsesc": "^3.0.2"
@@ -53,6 +55,7 @@
             "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.9.tgz",
             "integrity": "sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==",
             "dev": true,
+            "license": "MIT",
             "engines": {
                 "node": ">=6.9.0"
             }
@@ -62,17 +65,19 @@
             "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.9.tgz",
             "integrity": "sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==",
             "dev": true,
+            "license": "MIT",
             "engines": {
                 "node": ">=6.9.0"
             }
         },
         "node_modules/@babel/parser": {
-            "version": "7.26.3",
-            "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.26.3.tgz",
-            "integrity": "sha512-WJ/CvmY8Mea8iDXo6a7RK2wbmJITT5fN3BEkRuFlxVyNx8jOKIIhmC4fSkTcPcf8JyavbBwIe6OpiCOBXt/IcA==",
+            "version": "7.26.5",
+            "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.26.5.tgz",
+            "integrity": "sha512-SRJ4jYmXRqV1/Xc+TIVG84WjHBXKlxO9sHQnA2Pf12QQEAp1LOh6kDzNHXcUnbH1QI0FDoPPVOt+vyUDucxpaw==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
-                "@babel/types": "^7.26.3"
+                "@babel/types": "^7.26.5"
             },
             "bin": {
                 "parser": "bin/babel-parser.js"
@@ -86,6 +91,7 @@
             "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.25.9.tgz",
             "integrity": "sha512-9DGttpmPvIxBb/2uwpVo3dqJ+O6RooAFOS+lB+xDqoE2PVCE8nfoHMdZLpfCQRLwvohzXISPZcgxt80xLfsuwg==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "@babel/code-frame": "^7.25.9",
                 "@babel/parser": "^7.25.9",
@@ -96,16 +102,17 @@
             }
         },
         "node_modules/@babel/traverse": {
-            "version": "7.26.4",
-            "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.26.4.tgz",
-            "integrity": "sha512-fH+b7Y4p3yqvApJALCPJcwb0/XaOSgtK4pzV6WVjPR5GLFQBRI7pfoX2V2iM48NXvX07NUxxm1Vw98YjqTcU5w==",
+            "version": "7.26.5",
+            "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.26.5.tgz",
+            "integrity": "sha512-rkOSPOw+AXbgtwUga3U4u8RpoK9FEFWBNAlTpcnkLFjL5CT+oyHNuUUC/xx6XefEJ16r38r8Bc/lfp6rYuHeJQ==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "@babel/code-frame": "^7.26.2",
-                "@babel/generator": "^7.26.3",
-                "@babel/parser": "^7.26.3",
+                "@babel/generator": "^7.26.5",
+                "@babel/parser": "^7.26.5",
                 "@babel/template": "^7.25.9",
-                "@babel/types": "^7.26.3",
+                "@babel/types": "^7.26.5",
                 "debug": "^4.3.1",
                 "globals": "^11.1.0"
             },
@@ -114,10 +121,11 @@
             }
         },
         "node_modules/@babel/types": {
-            "version": "7.26.3",
-            "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.26.3.tgz",
-            "integrity": "sha512-vN5p+1kl59GVKMvTHt55NzzmYVxprfJD+ql7U9NFIfKCBkYE55LYtS+WtPlaYOyzydrKI8Nezd+aZextrd+FMA==",
+            "version": "7.26.5",
+            "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.26.5.tgz",
+            "integrity": "sha512-L6mZmwFDK6Cjh1nRCLXpa6no13ZIioJDz7mdkzHv399pThrTa/k0nUlNaenOeh2kWu/iaOQYElEpKPUswUa9Vg==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "@babel/helper-string-parser": "^7.25.9",
                 "@babel/helper-validator-identifier": "^7.25.9"
@@ -127,371 +135,428 @@
             }
         },
         "node_modules/@esbuild/aix-ppc64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.20.2.tgz",
-            "integrity": "sha512-D+EBOJHXdNZcLJRBkhENNG8Wji2kgc9AZ9KiPr1JuZjsNtyHzrsfLRrY0tk2H2aoFu6RANO1y1iPPUCDYWkb5g==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.24.2.tgz",
+            "integrity": "sha512-thpVCb/rhxE/BnMLQ7GReQLLN8q9qbHmI55F4489/ByVg2aQaQ6kbcLb6FHkocZzQhxc4gx0sCk0tJkKBFzDhA==",
             "cpu": [
                 "ppc64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "aix"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/android-arm": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.20.2.tgz",
-            "integrity": "sha512-t98Ra6pw2VaDhqNWO2Oph2LXbz/EJcnLmKLGBJwEwXX/JAN83Fym1rU8l0JUWK6HkIbWONCSSatf4sf2NBRx/w==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.24.2.tgz",
+            "integrity": "sha512-tmwl4hJkCfNHwFB3nBa8z1Uy3ypZpxqxfTQOcHX+xRByyYgunVbZ9MzUUfb0RxaHIMnbHagwAxuTL+tnNM+1/Q==",
             "cpu": [
                 "arm"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "android"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/android-arm64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.20.2.tgz",
-            "integrity": "sha512-mRzjLacRtl/tWU0SvD8lUEwb61yP9cqQo6noDZP/O8VkwafSYwZ4yWy24kan8jE/IMERpYncRt2dw438LP3Xmg==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.24.2.tgz",
+            "integrity": "sha512-cNLgeqCqV8WxfcTIOeL4OAtSmL8JjcN6m09XIgro1Wi7cF4t/THaWEa7eL5CMoMBdjoHOTh/vwTO/o2TRXIyzg==",
             "cpu": [
                 "arm64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "android"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/android-x64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.20.2.tgz",
-            "integrity": "sha512-btzExgV+/lMGDDa194CcUQm53ncxzeBrWJcncOBxuC6ndBkKxnHdFJn86mCIgTELsooUmwUm9FkhSp5HYu00Rg==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.24.2.tgz",
+            "integrity": "sha512-B6Q0YQDqMx9D7rvIcsXfmJfvUYLoP722bgfBlO5cGvNVb5V/+Y7nhBE3mHV9OpxBf4eAS2S68KZztiPaWq4XYw==",
             "cpu": [
                 "x64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "android"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/darwin-arm64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.20.2.tgz",
-            "integrity": "sha512-4J6IRT+10J3aJH3l1yzEg9y3wkTDgDk7TSDFX+wKFiWjqWp/iCfLIYzGyasx9l0SAFPT1HwSCR+0w/h1ES/MjA==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.24.2.tgz",
+            "integrity": "sha512-kj3AnYWc+CekmZnS5IPu9D+HWtUI49hbnyqk0FLEJDbzCIQt7hg7ucF1SQAilhtYpIujfaHr6O0UHlzzSPdOeA==",
             "cpu": [
                 "arm64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "darwin"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/darwin-x64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.20.2.tgz",
-            "integrity": "sha512-tBcXp9KNphnNH0dfhv8KYkZhjc+H3XBkF5DKtswJblV7KlT9EI2+jeA8DgBjp908WEuYll6pF+UStUCfEpdysA==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.24.2.tgz",
+            "integrity": "sha512-WeSrmwwHaPkNR5H3yYfowhZcbriGqooyu3zI/3GGpF8AyUdsrrP0X6KumITGA9WOyiJavnGZUwPGvxvwfWPHIA==",
             "cpu": [
                 "x64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "darwin"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/freebsd-arm64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.20.2.tgz",
-            "integrity": "sha512-d3qI41G4SuLiCGCFGUrKsSeTXyWG6yem1KcGZVS+3FYlYhtNoNgYrWcvkOoaqMhwXSMrZRl69ArHsGJ9mYdbbw==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.24.2.tgz",
+            "integrity": "sha512-UN8HXjtJ0k/Mj6a9+5u6+2eZ2ERD7Edt1Q9IZiB5UZAIdPnVKDoG7mdTVGhHJIeEml60JteamR3qhsr1r8gXvg==",
             "cpu": [
                 "arm64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "freebsd"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/freebsd-x64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.20.2.tgz",
-            "integrity": "sha512-d+DipyvHRuqEeM5zDivKV1KuXn9WeRX6vqSqIDgwIfPQtwMP4jaDsQsDncjTDDsExT4lR/91OLjRo8bmC1e+Cw==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.24.2.tgz",
+            "integrity": "sha512-TvW7wE/89PYW+IevEJXZ5sF6gJRDY/14hyIGFXdIucxCsbRmLUcjseQu1SyTko+2idmCw94TgyaEZi9HUSOe3Q==",
             "cpu": [
                 "x64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "freebsd"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/linux-arm": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.20.2.tgz",
-            "integrity": "sha512-VhLPeR8HTMPccbuWWcEUD1Az68TqaTYyj6nfE4QByZIQEQVWBB8vup8PpR7y1QHL3CpcF6xd5WVBU/+SBEvGTg==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.24.2.tgz",
+            "integrity": "sha512-n0WRM/gWIdU29J57hJyUdIsk0WarGd6To0s+Y+LwvlC55wt+GT/OgkwoXCXvIue1i1sSNWblHEig00GBWiJgfA==",
             "cpu": [
                 "arm"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "linux"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/linux-arm64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.20.2.tgz",
-            "integrity": "sha512-9pb6rBjGvTFNira2FLIWqDk/uaf42sSyLE8j1rnUpuzsODBq7FvpwHYZxQ/It/8b+QOS1RYfqgGFNLRI+qlq2A==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.24.2.tgz",
+            "integrity": "sha512-7HnAD6074BW43YvvUmE/35Id9/NB7BeX5EoNkK9obndmZBUk8xmJJeU7DwmUeN7tkysslb2eSl6CTrYz6oEMQg==",
             "cpu": [
                 "arm64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "linux"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/linux-ia32": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.20.2.tgz",
-            "integrity": "sha512-o10utieEkNPFDZFQm9CoP7Tvb33UutoJqg3qKf1PWVeeJhJw0Q347PxMvBgVVFgouYLGIhFYG0UGdBumROyiig==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.24.2.tgz",
+            "integrity": "sha512-sfv0tGPQhcZOgTKO3oBE9xpHuUqguHvSo4jl+wjnKwFpapx+vUDcawbwPNuBIAYdRAvIDBfZVvXprIj3HA+Ugw==",
             "cpu": [
                 "ia32"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "linux"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/linux-loong64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.20.2.tgz",
-            "integrity": "sha512-PR7sp6R/UC4CFVomVINKJ80pMFlfDfMQMYynX7t1tNTeivQ6XdX5r2XovMmha/VjR1YN/HgHWsVcTRIMkymrgQ==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.24.2.tgz",
+            "integrity": "sha512-CN9AZr8kEndGooS35ntToZLTQLHEjtVB5n7dl8ZcTZMonJ7CCfStrYhrzF97eAecqVbVJ7APOEe18RPI4KLhwQ==",
             "cpu": [
                 "loong64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "linux"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/linux-mips64el": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.20.2.tgz",
-            "integrity": "sha512-4BlTqeutE/KnOiTG5Y6Sb/Hw6hsBOZapOVF6njAESHInhlQAghVVZL1ZpIctBOoTFbQyGW+LsVYZ8lSSB3wkjA==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.24.2.tgz",
+            "integrity": "sha512-iMkk7qr/wl3exJATwkISxI7kTcmHKE+BlymIAbHO8xanq/TjHaaVThFF6ipWzPHryoFsesNQJPE/3wFJw4+huw==",
             "cpu": [
                 "mips64el"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "linux"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/linux-ppc64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.20.2.tgz",
-            "integrity": "sha512-rD3KsaDprDcfajSKdn25ooz5J5/fWBylaaXkuotBDGnMnDP1Uv5DLAN/45qfnf3JDYyJv/ytGHQaziHUdyzaAg==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.24.2.tgz",
+            "integrity": "sha512-shsVrgCZ57Vr2L8mm39kO5PPIb+843FStGt7sGGoqiiWYconSxwTiuswC1VJZLCjNiMLAMh34jg4VSEQb+iEbw==",
             "cpu": [
                 "ppc64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "linux"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/linux-riscv64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.20.2.tgz",
-            "integrity": "sha512-snwmBKacKmwTMmhLlz/3aH1Q9T8v45bKYGE3j26TsaOVtjIag4wLfWSiZykXzXuE1kbCE+zJRmwp+ZbIHinnVg==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.24.2.tgz",
+            "integrity": "sha512-4eSFWnU9Hhd68fW16GD0TINewo1L6dRrB+oLNNbYyMUAeOD2yCK5KXGK1GH4qD/kT+bTEXjsyTCiJGHPZ3eM9Q==",
             "cpu": [
                 "riscv64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "linux"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/linux-s390x": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.20.2.tgz",
-            "integrity": "sha512-wcWISOobRWNm3cezm5HOZcYz1sKoHLd8VL1dl309DiixxVFoFe/o8HnwuIwn6sXre88Nwj+VwZUvJf4AFxkyrQ==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.24.2.tgz",
+            "integrity": "sha512-S0Bh0A53b0YHL2XEXC20bHLuGMOhFDO6GN4b3YjRLK//Ep3ql3erpNcPlEFed93hsQAjAQDNsvcK+hV90FubSw==",
             "cpu": [
                 "s390x"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "linux"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/linux-x64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.20.2.tgz",
-            "integrity": "sha512-1MdwI6OOTsfQfek8sLwgyjOXAu+wKhLEoaOLTjbijk6E2WONYpH9ZU2mNtR+lZ2B4uwr+usqGuVfFT9tMtGvGw==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.24.2.tgz",
+            "integrity": "sha512-8Qi4nQcCTbLnK9WoMjdC9NiTG6/E38RNICU6sUNqK0QFxCYgoARqVqxdFmWkdonVsvGqWhmm7MO0jyTqLqwj0Q==",
             "cpu": [
                 "x64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "linux"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
+            }
+        },
+        "node_modules/@esbuild/netbsd-arm64": {
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.24.2.tgz",
+            "integrity": "sha512-wuLK/VztRRpMt9zyHSazyCVdCXlpHkKm34WUyinD2lzK07FAHTq0KQvZZlXikNWkDGoT6x3TD51jKQ7gMVpopw==",
+            "cpu": [
+                "arm64"
+            ],
+            "dev": true,
+            "license": "MIT",
+            "optional": true,
+            "os": [
+                "netbsd"
+            ],
+            "engines": {
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/netbsd-x64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.20.2.tgz",
-            "integrity": "sha512-K8/DhBxcVQkzYc43yJXDSyjlFeHQJBiowJ0uVL6Tor3jGQfSGHNNJcWxNbOI8v5k82prYqzPuwkzHt3J1T1iZQ==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.24.2.tgz",
+            "integrity": "sha512-VefFaQUc4FMmJuAxmIHgUmfNiLXY438XrL4GDNV1Y1H/RW3qow68xTwjZKfj/+Plp9NANmzbH5R40Meudu8mmw==",
             "cpu": [
                 "x64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "netbsd"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
+            }
+        },
+        "node_modules/@esbuild/openbsd-arm64": {
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.24.2.tgz",
+            "integrity": "sha512-YQbi46SBct6iKnszhSvdluqDmxCJA+Pu280Av9WICNwQmMxV7nLRHZfjQzwbPs3jeWnuAhE9Jy0NrnJ12Oz+0A==",
+            "cpu": [
+                "arm64"
+            ],
+            "dev": true,
+            "license": "MIT",
+            "optional": true,
+            "os": [
+                "openbsd"
+            ],
+            "engines": {
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/openbsd-x64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.20.2.tgz",
-            "integrity": "sha512-eMpKlV0SThJmmJgiVyN9jTPJ2VBPquf6Kt/nAoo6DgHAoN57K15ZghiHaMvqjCye/uU4X5u3YSMgVBI1h3vKrQ==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.24.2.tgz",
+            "integrity": "sha512-+iDS6zpNM6EnJyWv0bMGLWSWeXGN/HTaF/LXHXHwejGsVi+ooqDfMCCTerNFxEkM3wYVcExkeGXNqshc9iMaOA==",
             "cpu": [
                 "x64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "openbsd"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/sunos-x64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.20.2.tgz",
-            "integrity": "sha512-2UyFtRC6cXLyejf/YEld4Hajo7UHILetzE1vsRcGL3earZEW77JxrFjH4Ez2qaTiEfMgAXxfAZCm1fvM/G/o8w==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.24.2.tgz",
+            "integrity": "sha512-hTdsW27jcktEvpwNHJU4ZwWFGkz2zRJUz8pvddmXPtXDzVKTTINmlmga3ZzwcuMpUvLw7JkLy9QLKyGpD2Yxig==",
             "cpu": [
                 "x64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "sunos"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/win32-arm64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.20.2.tgz",
-            "integrity": "sha512-GRibxoawM9ZCnDxnP3usoUDO9vUkpAxIIZ6GQI+IlVmr5kP3zUq+l17xELTHMWTWzjxa2guPNyrpq1GWmPvcGQ==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.24.2.tgz",
+            "integrity": "sha512-LihEQ2BBKVFLOC9ZItT9iFprsE9tqjDjnbulhHoFxYQtQfai7qfluVODIYxt1PgdoyQkz23+01rzwNwYfutxUQ==",
             "cpu": [
                 "arm64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "win32"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/win32-ia32": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.20.2.tgz",
-            "integrity": "sha512-HfLOfn9YWmkSKRQqovpnITazdtquEW8/SoHW7pWpuEeguaZI4QnCRW6b+oZTztdBnZOS2hqJ6im/D5cPzBTTlQ==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.24.2.tgz",
+            "integrity": "sha512-q+iGUwfs8tncmFC9pcnD5IvRHAzmbwQ3GPS5/ceCyHdjXubwQWI12MKWSNSMYLJMq23/IUCvJMS76PDqXe1fxA==",
             "cpu": [
                 "ia32"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "win32"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@esbuild/win32-x64": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.20.2.tgz",
-            "integrity": "sha512-N49X4lJX27+l9jbLKSqZ6bKNjzQvHaT8IIFUy+YIqmXQdjYCToGWwOItDrfby14c78aDd5NHQl29xingXfCdLQ==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.24.2.tgz",
+            "integrity": "sha512-7VTgWzgMGvup6aSqDPLiW5zHaxYJGTO4OokMjIlrCtf+VpEL+cXKtCvg723iguPYI5oaUNdS+/V7OU2gvXVWEg==",
             "cpu": [
                 "x64"
             ],
             "dev": true,
+            "license": "MIT",
             "optional": true,
             "os": [
                 "win32"
             ],
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             }
         },
         "node_modules/@jridgewell/gen-mapping": {
@@ -499,6 +564,7 @@
             "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
             "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "@jridgewell/set-array": "^1.2.1",
                 "@jridgewell/sourcemap-codec": "^1.4.10",
@@ -513,6 +579,7 @@
             "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
             "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
             "dev": true,
+            "license": "MIT",
             "engines": {
                 "node": ">=6.0.0"
             }
@@ -522,6 +589,7 @@
             "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
             "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
             "dev": true,
+            "license": "MIT",
             "engines": {
                 "node": ">=6.0.0"
             }
@@ -530,13 +598,15 @@
             "version": "1.5.0",
             "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
             "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
-            "dev": true
+            "dev": true,
+            "license": "MIT"
         },
         "node_modules/@jridgewell/trace-mapping": {
             "version": "0.3.25",
             "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
             "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "@jridgewell/resolve-uri": "^3.1.0",
                 "@jridgewell/sourcemap-codec": "^1.4.14"
@@ -547,37 +617,41 @@
             "resolved": "https://registry.npmjs.org/@msgpack/msgpack/-/msgpack-3.0.0-beta2.tgz",
             "integrity": "sha512-y+l1PNV0XDyY8sM3YtuMLK5vE3/hkfId+Do8pLo/OPxfxuFAUwcGz3oiiUuV46/aBpwTzZ+mRWVMtlSKbradhw==",
             "dev": true,
+            "license": "ISC",
             "engines": {
                 "node": ">= 14"
             }
         },
         "node_modules/@rocket.chat/apps-engine": {
-            "version": "1.47.3",
-            "resolved": "https://registry.npmjs.org/@rocket.chat/apps-engine/-/apps-engine-1.47.3.tgz",
-            "integrity": "sha512-zc42yqqygWppq8UlKhiCyvHL+OrAgibWMO+++hGS8us/7aNs+9rHOo3J898mK472bwNmRPDYXTTxxWID/dWo0Q==",
+            "version": "1.48.1",
+            "resolved": "https://registry.npmjs.org/@rocket.chat/apps-engine/-/apps-engine-1.48.1.tgz",
+            "integrity": "sha512-tjzJImPT4wN0aqZ7PMKd1MZQl6wRoSGN8SJQC8HEFy8LOMESwS0vbd1Cu/fROhXlcTlWoXS8RbQ72QrKYMP5UA==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "@msgpack/msgpack": "3.0.0-beta2",
                 "adm-zip": "^0.5.16",
                 "debug": "^4.3.7",
-                "esbuild": "^0.20.2",
+                "esbuild": "^0.24.0",
                 "jose": "^4.15.9",
                 "jsonrpc-lite": "^2.2.0",
                 "lodash.clonedeep": "^4.5.0",
                 "semver": "^7.6.3",
                 "stack-trace": "0.0.10",
-                "uuid": "~8.3.2"
+                "uuid": "~11.0.3"
             }
         },
         "node_modules/@rocket.chat/icons": {
             "version": "0.38.0",
             "resolved": "https://registry.npmjs.org/@rocket.chat/icons/-/icons-0.38.0.tgz",
-            "integrity": "sha512-T0p6dIxyQSoYTQ9CQnq11vXMkadOXFuT8vYW2SG/JEieCJeZMTRF9hVBRC31pQB/4KF5qAtfXY6gdDC0iTBzCw=="
+            "integrity": "sha512-T0p6dIxyQSoYTQ9CQnq11vXMkadOXFuT8vYW2SG/JEieCJeZMTRF9hVBRC31pQB/4KF5qAtfXY6gdDC0iTBzCw==",
+            "license": "MIT"
         },
         "node_modules/@rocket.chat/ui-kit": {
             "version": "0.36.1",
             "resolved": "https://registry.npmjs.org/@rocket.chat/ui-kit/-/ui-kit-0.36.1.tgz",
             "integrity": "sha512-3gqNOc5LAmRlwGmre2fjSd0ey364qwA+NvId0D8bCObwhJCnq2u547p/knPa7uOBaRgKZFeMhX0wiK9mvfNHiA==",
+            "license": "MIT",
             "dependencies": {
                 "typia": "~5.3.3"
             },
@@ -589,6 +663,7 @@
             "version": "10.0.1",
             "resolved": "https://registry.npmjs.org/commander/-/commander-10.0.1.tgz",
             "integrity": "sha512-y4Mg2tXshplEbSGzx7amzPwKKOCGuoSRP/CjEdwwk0FOGlUbq6lKuoyDZTNZkmxHdJtp54hdfY/JUrdL7Xfdug==",
+            "license": "MIT",
             "engines": {
                 "node": ">=14"
             }
@@ -597,6 +672,7 @@
             "version": "5.3.3",
             "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.3.3.tgz",
             "integrity": "sha512-pXWcraxM0uxAS+tN0AG/BF2TyqmHO014Z070UsJ+pFvYuRSq8KH8DmWpnbXe0pEPDHXZV3FcAbJkijJ5oNEnWw==",
+            "license": "Apache-2.0",
             "peer": true,
             "bin": {
                 "tsc": "bin/tsc",
@@ -610,6 +686,7 @@
             "version": "5.3.12",
             "resolved": "https://registry.npmjs.org/typia/-/typia-5.3.12.tgz",
             "integrity": "sha512-PzgbFt08j7Cb3NKjB6KX7FTWD8dX0MicQ3zXqhDx0cMAeEd+i/omO9B+X/tvtuZ1e2w+2jz1QE3qXMF0/o/LDA==",
+            "license": "MIT",
             "dependencies": {
                 "commander": "^10.0.0",
                 "comment-json": "^4.2.3",
@@ -628,6 +705,7 @@
             "resolved": "https://registry.npmjs.org/@trivago/prettier-plugin-sort-imports/-/prettier-plugin-sort-imports-5.2.1.tgz",
             "integrity": "sha512-NDZndt0fmVThIx/8cExuJHLZagUVzfGCoVrwH9x6aZvwfBdkrDFTYujecek6X2WpG4uUFsVaPg5+aNQPSyjcmw==",
             "dev": true,
+            "license": "Apache-2.0",
             "dependencies": {
                 "@babel/generator": "^7.26.2",
                 "@babel/parser": "^7.26.2",
@@ -661,13 +739,15 @@
             "version": "14.14.6",
             "resolved": "https://registry.npmjs.org/@types/node/-/node-14.14.6.tgz",
             "integrity": "sha512-6QlRuqsQ/Ox/aJEQWBEJG7A9+u7oSYl3mem/K8IzxXG/kAGbV1YPD9Bg9Zw3vyxC/YP+zONKwy8hGkSt1jxFMw==",
-            "dev": true
+            "dev": true,
+            "license": "MIT"
         },
         "node_modules/adm-zip": {
             "version": "0.5.16",
             "resolved": "https://registry.npmjs.org/adm-zip/-/adm-zip-0.5.16.tgz",
             "integrity": "sha512-TGw5yVi4saajsSEgz25grObGHEUaDrniwvA2qwSC060KfqGPdglhvPMA2lPIoxs3PQIItj2iag35fONcQqgUaQ==",
             "dev": true,
+            "license": "MIT",
             "engines": {
                 "node": ">=12.0"
             }
@@ -676,6 +756,7 @@
             "version": "4.3.2",
             "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
             "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
+            "license": "MIT",
             "dependencies": {
                 "type-fest": "^0.21.3"
             },
@@ -690,6 +771,7 @@
             "version": "5.0.1",
             "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
             "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+            "license": "MIT",
             "engines": {
                 "node": ">=8"
             }
@@ -699,6 +781,7 @@
             "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
             "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "color-convert": "^1.9.0"
             },
@@ -711,6 +794,7 @@
             "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
             "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "sprintf-js": "~1.0.2"
             }
@@ -718,13 +802,15 @@
         "node_modules/array-timsort": {
             "version": "1.0.3",
             "resolved": "https://registry.npmjs.org/array-timsort/-/array-timsort-1.0.3.tgz",
-            "integrity": "sha512-/+3GRL7dDAGEfM6TseQk/U+mi18TU2Ms9I3UlLdUMhz2hbvGNTKdj9xniwXfUqgYhHxRx0+8UnKkvlNwVU+cWQ=="
+            "integrity": "sha512-/+3GRL7dDAGEfM6TseQk/U+mi18TU2Ms9I3UlLdUMhz2hbvGNTKdj9xniwXfUqgYhHxRx0+8UnKkvlNwVU+cWQ==",
+            "license": "MIT"
         },
         "node_modules/balanced-match": {
             "version": "1.0.2",
             "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
             "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
-            "dev": true
+            "dev": true,
+            "license": "MIT"
         },
         "node_modules/base64-js": {
             "version": "1.5.1",
@@ -743,12 +829,14 @@
                     "type": "consulting",
                     "url": "https://feross.org/support"
                 }
-            ]
+            ],
+            "license": "MIT"
         },
         "node_modules/bl": {
             "version": "4.1.0",
             "resolved": "https://registry.npmjs.org/bl/-/bl-4.1.0.tgz",
             "integrity": "sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==",
+            "license": "MIT",
             "dependencies": {
                 "buffer": "^5.5.0",
                 "inherits": "^2.0.4",
@@ -760,6 +848,7 @@
             "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
             "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "balanced-match": "^1.0.0",
                 "concat-map": "0.0.1"
@@ -783,6 +872,7 @@
                     "url": "https://feross.org/support"
                 }
             ],
+            "license": "MIT",
             "dependencies": {
                 "base64-js": "^1.3.1",
                 "ieee754": "^1.1.13"
@@ -793,6 +883,7 @@
             "resolved": "https://registry.npmjs.org/builtin-modules/-/builtin-modules-1.1.1.tgz",
             "integrity": "sha512-wxXCdllwGhI2kCC0MnvTGYTMvnVZTvqgypkiTI8Pa5tcz2i6VqsqwYGgqwXji+4RgCzms6EajE4IxiUH6HH8nQ==",
             "dev": true,
+            "license": "MIT",
             "engines": {
                 "node": ">=0.10.0"
             }
@@ -802,6 +893,7 @@
             "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
             "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "ansi-styles": "^3.2.1",
                 "escape-string-regexp": "^1.0.5",
@@ -814,12 +906,14 @@
         "node_modules/chardet": {
             "version": "0.7.0",
             "resolved": "https://registry.npmjs.org/chardet/-/chardet-0.7.0.tgz",
-            "integrity": "sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA=="
+            "integrity": "sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==",
+            "license": "MIT"
         },
         "node_modules/cli-cursor": {
             "version": "3.1.0",
             "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-3.1.0.tgz",
             "integrity": "sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw==",
+            "license": "MIT",
             "dependencies": {
                 "restore-cursor": "^3.1.0"
             },
@@ -831,6 +925,7 @@
             "version": "2.9.2",
             "resolved": "https://registry.npmjs.org/cli-spinners/-/cli-spinners-2.9.2.tgz",
             "integrity": "sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==",
+            "license": "MIT",
             "engines": {
                 "node": ">=6"
             },
@@ -842,6 +937,7 @@
             "version": "3.0.0",
             "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-3.0.0.tgz",
             "integrity": "sha512-FxqpkPPwu1HjuN93Omfm4h8uIanXofW0RxVEW3k5RKx+mJJYSthzNhp32Kzxxy3YAEZ/Dc/EWN1vZRY0+kOhbw==",
+            "license": "ISC",
             "engines": {
                 "node": ">= 10"
             }
@@ -850,6 +946,7 @@
             "version": "1.0.4",
             "resolved": "https://registry.npmjs.org/clone/-/clone-1.0.4.tgz",
             "integrity": "sha512-JQHZ2QMW6l3aH/j6xCqQThY/9OH4D/9ls34cgkUBiEeocRTU04tHfKPBsUK1PqZCUQM7GiA0IIXJSuXHI64Kbg==",
+            "license": "MIT",
             "engines": {
                 "node": ">=0.8"
             }
@@ -859,6 +956,7 @@
             "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
             "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "color-name": "1.1.3"
             }
@@ -867,18 +965,21 @@
             "version": "1.1.3",
             "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
             "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
-            "dev": true
+            "dev": true,
+            "license": "MIT"
         },
         "node_modules/commander": {
             "version": "2.20.3",
             "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
             "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==",
-            "dev": true
+            "dev": true,
+            "license": "MIT"
         },
         "node_modules/comment-json": {
             "version": "4.2.5",
             "resolved": "https://registry.npmjs.org/comment-json/-/comment-json-4.2.5.tgz",
             "integrity": "sha512-bKw/r35jR3HGt5PEPm1ljsQQGyCrR8sFGNiN5L+ykDHdpO8Smxkrkla9Yi6NkQyUrb8V54PGhfMs6NrIwtxtdw==",
+            "license": "MIT",
             "dependencies": {
                 "array-timsort": "^1.0.3",
                 "core-util-is": "^1.0.3",
@@ -894,18 +995,21 @@
             "version": "0.0.1",
             "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
             "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
-            "dev": true
+            "dev": true,
+            "license": "MIT"
         },
         "node_modules/core-util-is": {
             "version": "1.0.3",
             "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
-            "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ=="
+            "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==",
+            "license": "MIT"
         },
         "node_modules/debug": {
             "version": "4.4.0",
             "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
             "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "ms": "^2.1.3"
             },
@@ -922,6 +1026,7 @@
             "version": "1.0.4",
             "resolved": "https://registry.npmjs.org/defaults/-/defaults-1.0.4.tgz",
             "integrity": "sha512-eFuaLoy/Rxalv2kr+lqMlUnrDWV+3j4pljOIJgLIhI058IQfWJ7vXhyEIHu+HtC738klGALYxOKDO0bQP3tg8A==",
+            "license": "MIT",
             "dependencies": {
                 "clone": "^1.0.2"
             },
@@ -934,6 +1039,7 @@
             "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
             "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
             "dev": true,
+            "license": "BSD-3-Clause",
             "engines": {
                 "node": ">=0.3.1"
             }
@@ -942,6 +1048,7 @@
             "version": "1.1.1",
             "resolved": "https://registry.npmjs.org/drange/-/drange-1.1.1.tgz",
             "integrity": "sha512-pYxfDYpued//QpnLIm4Avk7rsNtAtQkUES2cwAYSvD/wd2pKD71gN2Ebj3e7klzXwjocvE8c5vx/1fxwpqmSxA==",
+            "license": "MIT",
             "engines": {
                 "node": ">=4"
             }
@@ -949,50 +1056,55 @@
         "node_modules/emoji-regex": {
             "version": "8.0.0",
             "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
-            "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
+            "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+            "license": "MIT"
         },
         "node_modules/esbuild": {
-            "version": "0.20.2",
-            "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.20.2.tgz",
-            "integrity": "sha512-WdOOppmUNU+IbZ0PaDiTst80zjnrOkyJNHoKupIcVyU8Lvla3Ugx94VzkQ32Ijqd7UhHJy75gNWDMUekcrSJ6g==",
+            "version": "0.24.2",
+            "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.24.2.tgz",
+            "integrity": "sha512-+9egpBW8I3CD5XPe0n6BfT5fxLzxrlDzqydF3aviG+9ni1lDC/OvMHcxqEFV0+LANZG5R1bFMWfUrjVsdwxJvA==",
             "dev": true,
             "hasInstallScript": true,
+            "license": "MIT",
             "bin": {
                 "esbuild": "bin/esbuild"
             },
             "engines": {
-                "node": ">=12"
+                "node": ">=18"
             },
             "optionalDependencies": {
-                "@esbuild/aix-ppc64": "0.20.2",
-                "@esbuild/android-arm": "0.20.2",
-                "@esbuild/android-arm64": "0.20.2",
-                "@esbuild/android-x64": "0.20.2",
-                "@esbuild/darwin-arm64": "0.20.2",
-                "@esbuild/darwin-x64": "0.20.2",
-                "@esbuild/freebsd-arm64": "0.20.2",
-                "@esbuild/freebsd-x64": "0.20.2",
-                "@esbuild/linux-arm": "0.20.2",
-                "@esbuild/linux-arm64": "0.20.2",
-                "@esbuild/linux-ia32": "0.20.2",
-                "@esbuild/linux-loong64": "0.20.2",
-                "@esbuild/linux-mips64el": "0.20.2",
-                "@esbuild/linux-ppc64": "0.20.2",
-                "@esbuild/linux-riscv64": "0.20.2",
-                "@esbuild/linux-s390x": "0.20.2",
-                "@esbuild/linux-x64": "0.20.2",
-                "@esbuild/netbsd-x64": "0.20.2",
-                "@esbuild/openbsd-x64": "0.20.2",
-                "@esbuild/sunos-x64": "0.20.2",
-                "@esbuild/win32-arm64": "0.20.2",
-                "@esbuild/win32-ia32": "0.20.2",
-                "@esbuild/win32-x64": "0.20.2"
+                "@esbuild/aix-ppc64": "0.24.2",
+                "@esbuild/android-arm": "0.24.2",
+                "@esbuild/android-arm64": "0.24.2",
+                "@esbuild/android-x64": "0.24.2",
+                "@esbuild/darwin-arm64": "0.24.2",
+                "@esbuild/darwin-x64": "0.24.2",
+                "@esbuild/freebsd-arm64": "0.24.2",
+                "@esbuild/freebsd-x64": "0.24.2",
+                "@esbuild/linux-arm": "0.24.2",
+                "@esbuild/linux-arm64": "0.24.2",
+                "@esbuild/linux-ia32": "0.24.2",
+                "@esbuild/linux-loong64": "0.24.2",
+                "@esbuild/linux-mips64el": "0.24.2",
+                "@esbuild/linux-ppc64": "0.24.2",
+                "@esbuild/linux-riscv64": "0.24.2",
+                "@esbuild/linux-s390x": "0.24.2",
+                "@esbuild/linux-x64": "0.24.2",
+                "@esbuild/netbsd-arm64": "0.24.2",
+                "@esbuild/netbsd-x64": "0.24.2",
+                "@esbuild/openbsd-arm64": "0.24.2",
+                "@esbuild/openbsd-x64": "0.24.2",
+                "@esbuild/sunos-x64": "0.24.2",
+                "@esbuild/win32-arm64": "0.24.2",
+                "@esbuild/win32-ia32": "0.24.2",
+                "@esbuild/win32-x64": "0.24.2"
             }
         },
         "node_modules/escape-string-regexp": {
             "version": "1.0.5",
             "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
             "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
+            "license": "MIT",
             "engines": {
                 "node": ">=0.8.0"
             }
@@ -1001,6 +1113,7 @@
             "version": "4.0.1",
             "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
             "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
+            "license": "BSD-2-Clause",
             "bin": {
                 "esparse": "bin/esparse.js",
                 "esvalidate": "bin/esvalidate.js"
@@ -1013,6 +1126,7 @@
             "version": "3.1.0",
             "resolved": "https://registry.npmjs.org/external-editor/-/external-editor-3.1.0.tgz",
             "integrity": "sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==",
+            "license": "MIT",
             "dependencies": {
                 "chardet": "^0.7.0",
                 "iconv-lite": "^0.4.24",
@@ -1026,6 +1140,7 @@
             "version": "3.2.0",
             "resolved": "https://registry.npmjs.org/figures/-/figures-3.2.0.tgz",
             "integrity": "sha512-yaduQFRKLXYOGgEn6AZau90j3ggSOyiqXU0F9JZfeXYhNa+Jk4X+s45A2zg5jns87GAFa34BBm2kXw4XpNcbdg==",
+            "license": "MIT",
             "dependencies": {
                 "escape-string-regexp": "^1.0.5"
             },
@@ -1040,13 +1155,15 @@
             "version": "1.0.0",
             "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
             "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
-            "dev": true
+            "dev": true,
+            "license": "ISC"
         },
         "node_modules/function-bind": {
             "version": "1.1.2",
             "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
             "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
             "dev": true,
+            "license": "MIT",
             "funding": {
                 "url": "https://github.com/sponsors/ljharb"
             }
@@ -1057,6 +1174,7 @@
             "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
             "deprecated": "Glob versions prior to v9 are no longer supported",
             "dev": true,
+            "license": "ISC",
             "dependencies": {
                 "fs.realpath": "^1.0.0",
                 "inflight": "^1.0.4",
@@ -1077,6 +1195,7 @@
             "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
             "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
             "dev": true,
+            "license": "MIT",
             "engines": {
                 "node": ">=4"
             }
@@ -1086,6 +1205,7 @@
             "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
             "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
             "dev": true,
+            "license": "MIT",
             "engines": {
                 "node": ">=4"
             }
@@ -1094,6 +1214,7 @@
             "version": "2.0.0",
             "resolved": "https://registry.npmjs.org/has-own-prop/-/has-own-prop-2.0.0.tgz",
             "integrity": "sha512-Pq0h+hvsVm6dDEa8x82GnLSYHOzNDt7f0ddFa3FqcQlgzEiptPqL+XrOJNavjOzSYiYWIrgeVYYgGlLmnxwilQ==",
+            "license": "MIT",
             "engines": {
                 "node": ">=8"
             }
@@ -1103,6 +1224,7 @@
             "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
             "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "function-bind": "^1.1.2"
             },
@@ -1114,6 +1236,7 @@
             "version": "0.4.24",
             "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
             "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
+            "license": "MIT",
             "dependencies": {
                 "safer-buffer": ">= 2.1.2 < 3"
             },
@@ -1138,7 +1261,8 @@
                     "type": "consulting",
                     "url": "https://feross.org/support"
                 }
-            ]
+            ],
+            "license": "BSD-3-Clause"
         },
         "node_modules/inflight": {
             "version": "1.0.6",
@@ -1146,6 +1270,7 @@
             "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
             "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
             "dev": true,
+            "license": "ISC",
             "dependencies": {
                 "once": "^1.3.0",
                 "wrappy": "1"
@@ -1154,12 +1279,14 @@
         "node_modules/inherits": {
             "version": "2.0.4",
             "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
-            "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
+            "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
+            "license": "ISC"
         },
         "node_modules/inquirer": {
             "version": "8.2.6",
             "resolved": "https://registry.npmjs.org/inquirer/-/inquirer-8.2.6.tgz",
             "integrity": "sha512-M1WuAmb7pn9zdFRtQYk26ZBoY043Sse0wVDdk4Bppr+JOXyQYybdtvK+l9wUibhtjdjvtoiNy8tk+EgsYIUqKg==",
+            "license": "MIT",
             "dependencies": {
                 "ansi-escapes": "^4.2.1",
                 "chalk": "^4.1.1",
@@ -1185,6 +1312,7 @@
             "version": "4.3.0",
             "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
             "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+            "license": "MIT",
             "dependencies": {
                 "color-convert": "^2.0.1"
             },
@@ -1199,6 +1327,7 @@
             "version": "4.1.2",
             "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
             "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+            "license": "MIT",
             "dependencies": {
                 "ansi-styles": "^4.1.0",
                 "supports-color": "^7.1.0"
@@ -1214,6 +1343,7 @@
             "version": "2.0.1",
             "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
             "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+            "license": "MIT",
             "dependencies": {
                 "color-name": "~1.1.4"
             },
@@ -1224,12 +1354,14 @@
         "node_modules/inquirer/node_modules/color-name": {
             "version": "1.1.4",
             "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-            "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
+            "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+            "license": "MIT"
         },
         "node_modules/inquirer/node_modules/has-flag": {
             "version": "4.0.0",
             "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
             "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+            "license": "MIT",
             "engines": {
                 "node": ">=8"
             }
@@ -1238,6 +1370,7 @@
             "version": "7.2.0",
             "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
             "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+            "license": "MIT",
             "dependencies": {
                 "has-flag": "^4.0.0"
             },
@@ -1250,6 +1383,7 @@
             "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
             "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "hasown": "^2.0.2"
             },
@@ -1264,6 +1398,7 @@
             "version": "3.0.0",
             "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
             "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+            "license": "MIT",
             "engines": {
                 "node": ">=8"
             }
@@ -1272,6 +1407,7 @@
             "version": "1.0.0",
             "resolved": "https://registry.npmjs.org/is-interactive/-/is-interactive-1.0.0.tgz",
             "integrity": "sha512-2HvIEKRoqS62guEC+qBjpvRubdX910WCMuJTZ+I9yvqKU2/12eSL549HMwtabb4oupdj2sMP50k+XJfB/8JE6w==",
+            "license": "MIT",
             "engines": {
                 "node": ">=8"
             }
@@ -1280,6 +1416,7 @@
             "version": "0.1.0",
             "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-0.1.0.tgz",
             "integrity": "sha512-knxG2q4UC3u8stRGyAVJCOdxFmv5DZiRcdlIaAQXAbSfJya+OhopNotLQrstBhququ4ZpuKbDc/8S6mgXgPFPw==",
+            "license": "MIT",
             "engines": {
                 "node": ">=10"
             },
@@ -1291,13 +1428,15 @@
             "version": "0.7.1",
             "resolved": "https://registry.npmjs.org/javascript-natural-sort/-/javascript-natural-sort-0.7.1.tgz",
             "integrity": "sha512-nO6jcEfZWQXDhOiBtG2KvKyEptz7RVbpGP4vTD2hLBdmNQSsCiicO2Ioinv6UI4y9ukqnBpy+XZ9H6uLNgJTlw==",
-            "dev": true
+            "dev": true,
+            "license": "MIT"
         },
         "node_modules/jose": {
             "version": "4.15.9",
             "resolved": "https://registry.npmjs.org/jose/-/jose-4.15.9.tgz",
             "integrity": "sha512-1vUQX+IdDMVPj4k8kOxgUqlcK518yluMuGZwqlr44FS1ppZB/5GWh4rZG89erpOBOJjU/OBsnCVFfapsRz6nEA==",
             "dev": true,
+            "license": "MIT",
             "funding": {
                 "url": "https://github.com/sponsors/panva"
             }
@@ -1306,13 +1445,15 @@
             "version": "4.0.0",
             "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
             "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
-            "dev": true
+            "dev": true,
+            "license": "MIT"
         },
         "node_modules/js-yaml": {
             "version": "3.14.1",
             "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
             "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "argparse": "^1.0.7",
                 "esprima": "^4.0.0"
@@ -1326,6 +1467,7 @@
             "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
             "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
             "dev": true,
+            "license": "MIT",
             "bin": {
                 "jsesc": "bin/jsesc"
             },
@@ -1337,23 +1479,27 @@
             "version": "2.2.0",
             "resolved": "https://registry.npmjs.org/jsonrpc-lite/-/jsonrpc-lite-2.2.0.tgz",
             "integrity": "sha512-/cbbSxtZWs1O7R4tWqabrCM/t3N8qKUZMAg9IUqpPvUs6UyRvm6pCNYkskyKN/XU0UgffW+NY2ZRr8t0AknX7g==",
-            "dev": true
+            "dev": true,
+            "license": "MIT"
         },
         "node_modules/lodash": {
             "version": "4.17.21",
             "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
-            "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
+            "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
+            "license": "MIT"
         },
         "node_modules/lodash.clonedeep": {
             "version": "4.5.0",
             "resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
             "integrity": "sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ==",
-            "dev": true
+            "dev": true,
+            "license": "MIT"
         },
         "node_modules/log-symbols": {
             "version": "4.1.0",
             "resolved": "https://registry.npmjs.org/log-symbols/-/log-symbols-4.1.0.tgz",
             "integrity": "sha512-8XPvpAA8uyhfteu8pIvQxpJZ7SYYdpUivZpGy6sFsBuKRY/7rQGavedeB8aK+Zkyq6upMFVL/9AW6vOYzfRyLg==",
+            "license": "MIT",
             "dependencies": {
                 "chalk": "^4.1.0",
                 "is-unicode-supported": "^0.1.0"
@@ -1369,6 +1515,7 @@
             "version": "4.3.0",
             "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
             "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+            "license": "MIT",
             "dependencies": {
                 "color-convert": "^2.0.1"
             },
@@ -1383,6 +1530,7 @@
             "version": "4.1.2",
             "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
             "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+            "license": "MIT",
             "dependencies": {
                 "ansi-styles": "^4.1.0",
                 "supports-color": "^7.1.0"
@@ -1398,6 +1546,7 @@
             "version": "2.0.1",
             "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
             "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+            "license": "MIT",
             "dependencies": {
                 "color-name": "~1.1.4"
             },
@@ -1408,12 +1557,14 @@
         "node_modules/log-symbols/node_modules/color-name": {
             "version": "1.1.4",
             "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-            "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
+            "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+            "license": "MIT"
         },
         "node_modules/log-symbols/node_modules/has-flag": {
             "version": "4.0.0",
             "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
             "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+            "license": "MIT",
             "engines": {
                 "node": ">=8"
             }
@@ -1422,6 +1573,7 @@
             "version": "7.2.0",
             "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
             "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+            "license": "MIT",
             "dependencies": {
                 "has-flag": "^4.0.0"
             },
@@ -1433,6 +1585,7 @@
             "version": "2.1.0",
             "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
             "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
+            "license": "MIT",
             "engines": {
                 "node": ">=6"
             }
@@ -1442,6 +1595,7 @@
             "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
             "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
             "dev": true,
+            "license": "ISC",
             "dependencies": {
                 "brace-expansion": "^1.1.7"
             },
@@ -1454,6 +1608,7 @@
             "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
             "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
             "dev": true,
+            "license": "MIT",
             "funding": {
                 "url": "https://github.com/sponsors/ljharb"
             }
@@ -1463,6 +1618,7 @@
             "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
             "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "minimist": "^1.2.6"
             },
@@ -1474,18 +1630,21 @@
             "version": "2.1.3",
             "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
             "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-            "dev": true
+            "dev": true,
+            "license": "MIT"
         },
         "node_modules/mute-stream": {
             "version": "0.0.8",
             "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.8.tgz",
-            "integrity": "sha512-nnbWWOkoWyUsTjKrhgD0dcz22mdkSnpYqbEjIm2nhwhuxlSkpywJmBo8h0ZqJdkp73mb90SssHkN4rsRaBAfAA=="
+            "integrity": "sha512-nnbWWOkoWyUsTjKrhgD0dcz22mdkSnpYqbEjIm2nhwhuxlSkpywJmBo8h0ZqJdkp73mb90SssHkN4rsRaBAfAA==",
+            "license": "ISC"
         },
         "node_modules/once": {
             "version": "1.4.0",
             "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
             "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
             "dev": true,
+            "license": "ISC",
             "dependencies": {
                 "wrappy": "1"
             }
@@ -1494,6 +1653,7 @@
             "version": "5.1.2",
             "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
             "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
+            "license": "MIT",
             "dependencies": {
                 "mimic-fn": "^2.1.0"
             },
@@ -1508,6 +1668,7 @@
             "version": "5.4.1",
             "resolved": "https://registry.npmjs.org/ora/-/ora-5.4.1.tgz",
             "integrity": "sha512-5b6Y85tPxZZ7QytO+BQzysW31HJku27cRIlkbAXaNx+BdcVi+LlRFmVXzeF6a7JCwJpyw5c4b+YSVImQIrBpuQ==",
+            "license": "MIT",
             "dependencies": {
                 "bl": "^4.1.0",
                 "chalk": "^4.1.0",
@@ -1530,6 +1691,7 @@
             "version": "4.3.0",
             "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
             "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+            "license": "MIT",
             "dependencies": {
                 "color-convert": "^2.0.1"
             },
@@ -1544,6 +1706,7 @@
             "version": "4.1.2",
             "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
             "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+            "license": "MIT",
             "dependencies": {
                 "ansi-styles": "^4.1.0",
                 "supports-color": "^7.1.0"
@@ -1559,6 +1722,7 @@
             "version": "2.0.1",
             "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
             "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+            "license": "MIT",
             "dependencies": {
                 "color-name": "~1.1.4"
             },
@@ -1569,12 +1733,14 @@
         "node_modules/ora/node_modules/color-name": {
             "version": "1.1.4",
             "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-            "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
+            "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+            "license": "MIT"
         },
         "node_modules/ora/node_modules/has-flag": {
             "version": "4.0.0",
             "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
             "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+            "license": "MIT",
             "engines": {
                 "node": ">=8"
             }
@@ -1583,6 +1749,7 @@
             "version": "7.2.0",
             "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
             "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+            "license": "MIT",
             "dependencies": {
                 "has-flag": "^4.0.0"
             },
@@ -1594,6 +1761,7 @@
             "version": "1.0.2",
             "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
             "integrity": "sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==",
+            "license": "MIT",
             "engines": {
                 "node": ">=0.10.0"
             }
@@ -1603,6 +1771,7 @@
             "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
             "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
             "dev": true,
+            "license": "MIT",
             "engines": {
                 "node": ">=0.10.0"
             }
@@ -1611,19 +1780,22 @@
             "version": "1.0.7",
             "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
             "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
-            "dev": true
+            "dev": true,
+            "license": "MIT"
         },
         "node_modules/picocolors": {
             "version": "1.1.1",
             "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
             "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
-            "dev": true
+            "dev": true,
+            "license": "ISC"
         },
         "node_modules/prettier": {
             "version": "3.4.2",
             "resolved": "https://registry.npmjs.org/prettier/-/prettier-3.4.2.tgz",
             "integrity": "sha512-e9MewbtFo+Fevyuxn/4rrcDAaq0IYxPGLvObpQjiZBMAzB9IGmzlnG9RZy3FFas+eBMu2vA0CszMeduow5dIuQ==",
             "dev": true,
+            "license": "MIT",
             "bin": {
                 "prettier": "bin/prettier.cjs"
             },
@@ -1639,6 +1811,7 @@
             "resolved": "https://registry.npmjs.org/prettier-plugin-organize-imports/-/prettier-plugin-organize-imports-4.1.0.tgz",
             "integrity": "sha512-5aWRdCgv645xaa58X8lOxzZoiHAldAPChljr/MT0crXVOWTZ+Svl4hIWlz+niYSlO6ikE5UXkN1JrRvIP2ut0A==",
             "dev": true,
+            "license": "MIT",
             "peerDependencies": {
                 "prettier": ">=2.0",
                 "typescript": ">=2.9",
@@ -1654,6 +1827,7 @@
             "version": "0.5.3",
             "resolved": "https://registry.npmjs.org/randexp/-/randexp-0.5.3.tgz",
             "integrity": "sha512-U+5l2KrcMNOUPYvazA3h5ekF80FHTUG+87SEAmHZmolh1M+i/WyTCxVzmi+tidIa1tM4BSe8g2Y/D3loWDjj+w==",
+            "license": "MIT",
             "dependencies": {
                 "drange": "^1.0.2",
                 "ret": "^0.2.0"
@@ -1666,6 +1840,7 @@
             "version": "3.6.2",
             "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
             "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
+            "license": "MIT",
             "dependencies": {
                 "inherits": "^2.0.3",
                 "string_decoder": "^1.1.1",
@@ -1679,6 +1854,7 @@
             "version": "1.6.1",
             "resolved": "https://registry.npmjs.org/repeat-string/-/repeat-string-1.6.1.tgz",
             "integrity": "sha512-PV0dzCYDNfRi1jCDbJzpW7jNNDRuCOG/jI5ctQcGKt/clZD+YcPS3yIlWuTJMmESC8aevCFmWJy5wjAFgNqN6w==",
+            "license": "MIT",
             "engines": {
                 "node": ">=0.10"
             }
@@ -1688,6 +1864,7 @@
             "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
             "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "is-core-module": "^2.16.0",
                 "path-parse": "^1.0.7",
@@ -1707,6 +1884,7 @@
             "version": "3.1.0",
             "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-3.1.0.tgz",
             "integrity": "sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA==",
+            "license": "MIT",
             "dependencies": {
                 "onetime": "^5.1.0",
                 "signal-exit": "^3.0.2"
@@ -1719,6 +1897,7 @@
             "version": "0.2.2",
             "resolved": "https://registry.npmjs.org/ret/-/ret-0.2.2.tgz",
             "integrity": "sha512-M0b3YWQs7R3Z917WRQy1HHA7Ba7D8hvZg6UE5mLykJxQVE2ju0IXbGlaHPPlkY+WN7wFP+wUMXmBFA0aV6vYGQ==",
+            "license": "MIT",
             "engines": {
                 "node": ">=4"
             }
@@ -1727,6 +1906,7 @@
             "version": "2.4.1",
             "resolved": "https://registry.npmjs.org/run-async/-/run-async-2.4.1.tgz",
             "integrity": "sha512-tvVnVv01b8c1RrA6Ep7JkStj85Guv/YrMcwqYQnwjsAS2cTmmPGBBjAjpCW7RrSodNSoE2/qg9O4bceNvUuDgQ==",
+            "license": "MIT",
             "engines": {
                 "node": ">=0.12.0"
             }
@@ -1735,6 +1915,7 @@
             "version": "7.8.1",
             "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-7.8.1.tgz",
             "integrity": "sha512-AA3TVj+0A2iuIoQkWEK/tqFjBq2j+6PO6Y0zJcvzLAFhEFIO3HL0vls9hWLncZbAAbK0mar7oZ4V079I/qPMxg==",
+            "license": "Apache-2.0",
             "dependencies": {
                 "tslib": "^2.1.0"
             }
@@ -1742,7 +1923,8 @@
         "node_modules/rxjs/node_modules/tslib": {
             "version": "2.8.1",
             "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
-            "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w=="
+            "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
+            "license": "0BSD"
         },
         "node_modules/safe-buffer": {
             "version": "5.2.1",
@@ -1761,18 +1943,21 @@
                     "type": "consulting",
                     "url": "https://feross.org/support"
                 }
-            ]
+            ],
+            "license": "MIT"
         },
         "node_modules/safer-buffer": {
             "version": "2.1.2",
             "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
-            "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
+            "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
+            "license": "MIT"
         },
         "node_modules/semver": {
             "version": "7.6.3",
             "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.3.tgz",
             "integrity": "sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==",
             "dev": true,
+            "license": "ISC",
             "bin": {
                 "semver": "bin/semver.js"
             },
@@ -1783,19 +1968,22 @@
         "node_modules/signal-exit": {
             "version": "3.0.7",
             "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
-            "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
+            "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
+            "license": "ISC"
         },
         "node_modules/sprintf-js": {
             "version": "1.0.3",
             "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
             "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
-            "dev": true
+            "dev": true,
+            "license": "BSD-3-Clause"
         },
         "node_modules/stack-trace": {
             "version": "0.0.10",
             "resolved": "https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.10.tgz",
             "integrity": "sha512-KGzahc7puUKkzyMt+IqAep+TVNbKP+k2Lmwhub39m1AsTSkaDutx56aDCo+HLDzf/D26BIHTJWNiTG1KAJiQCg==",
             "dev": true,
+            "license": "MIT",
             "engines": {
                 "node": "*"
             }
@@ -1804,6 +1992,7 @@
             "version": "1.3.0",
             "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
             "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
+            "license": "MIT",
             "dependencies": {
                 "safe-buffer": "~5.2.0"
             }
@@ -1812,6 +2001,7 @@
             "version": "4.2.3",
             "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
             "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+            "license": "MIT",
             "dependencies": {
                 "emoji-regex": "^8.0.0",
                 "is-fullwidth-code-point": "^3.0.0",
@@ -1825,6 +2015,7 @@
             "version": "6.0.1",
             "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
             "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+            "license": "MIT",
             "dependencies": {
                 "ansi-regex": "^5.0.1"
             },
@@ -1837,6 +2028,7 @@
             "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
             "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "has-flag": "^3.0.0"
             },
@@ -1849,6 +2041,7 @@
             "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
             "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
             "dev": true,
+            "license": "MIT",
             "engines": {
                 "node": ">= 0.4"
             },
@@ -1859,12 +2052,14 @@
         "node_modules/through": {
             "version": "2.3.8",
             "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
-            "integrity": "sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg=="
+            "integrity": "sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg==",
+            "license": "MIT"
         },
         "node_modules/tmp": {
             "version": "0.0.33",
             "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.0.33.tgz",
             "integrity": "sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==",
+            "license": "MIT",
             "dependencies": {
                 "os-tmpdir": "~1.0.2"
             },
@@ -1876,13 +2071,15 @@
             "version": "1.14.1",
             "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
             "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
-            "dev": true
+            "dev": true,
+            "license": "0BSD"
         },
         "node_modules/tslint": {
             "version": "5.20.1",
             "resolved": "https://registry.npmjs.org/tslint/-/tslint-5.20.1.tgz",
             "integrity": "sha512-EcMxhzCFt8k+/UP5r8waCf/lzmeSyVlqxqMEDQE7rWYiQky8KpIBz1JAoYXfROHrPZ1XXd43q8yQnULOLiBRQg==",
             "dev": true,
+            "license": "Apache-2.0",
             "dependencies": {
                 "@babel/code-frame": "^7.0.0",
                 "builtin-modules": "^1.1.1",
@@ -1913,6 +2110,7 @@
             "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
             "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
             "dev": true,
+            "license": "ISC",
             "bin": {
                 "semver": "bin/semver"
             }
@@ -1922,6 +2120,7 @@
             "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-2.29.0.tgz",
             "integrity": "sha512-g5JVHCIJwzfISaXpXE1qvNalca5Jwob6FjI4AoPlqMusJ6ftFE7IkkFoMhVLRgK+4Kx3gkzb8UZK5t5yTTvEmA==",
             "dev": true,
+            "license": "MIT",
             "dependencies": {
                 "tslib": "^1.8.1"
             },
@@ -1933,6 +2132,7 @@
             "version": "0.21.3",
             "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
             "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
+            "license": "(MIT OR CC0-1.0)",
             "engines": {
                 "node": ">=10"
             },
@@ -1941,10 +2141,11 @@
             }
         },
         "node_modules/typescript": {
-            "version": "5.7.2",
-            "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.7.2.tgz",
-            "integrity": "sha512-i5t66RHxDvVN40HfDd1PsEThGNnlMCMT3jMUuoh9/0TaqWevNontacunWyN02LA9/fIbEWlcHZcgTKb9QoaLfg==",
+            "version": "5.7.3",
+            "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.7.3.tgz",
+            "integrity": "sha512-84MVSjMEHP+FQRPy3pX9sTVV/INIex71s9TL2Gm5FG/WG1SqXeKyZ0k7/blY/4FdOzI12CBy1vGc4og/eus0fw==",
             "dev": true,
+            "license": "Apache-2.0",
             "bin": {
                 "tsc": "bin/tsc",
                 "tsserver": "bin/tsserver"
@@ -1956,21 +2157,28 @@
         "node_modules/util-deprecate": {
             "version": "1.0.2",
             "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
-            "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
+            "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
+            "license": "MIT"
         },
         "node_modules/uuid": {
-            "version": "8.3.2",
-            "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
-            "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
+            "version": "11.0.5",
+            "resolved": "https://registry.npmjs.org/uuid/-/uuid-11.0.5.tgz",
+            "integrity": "sha512-508e6IcKLrhxKdBbcA2b4KQZlLVp2+J5UwQ6F7Drckkc5N9ZJwFa4TgWtsww9UG8fGHbm6gbV19TdM5pQ4GaIA==",
             "dev": true,
+            "funding": [
+                "https://github.com/sponsors/broofa",
+                "https://github.com/sponsors/ctavan"
+            ],
+            "license": "MIT",
             "bin": {
-                "uuid": "dist/bin/uuid"
+                "uuid": "dist/esm/bin/uuid"
             }
         },
         "node_modules/wcwidth": {
             "version": "1.0.1",
             "resolved": "https://registry.npmjs.org/wcwidth/-/wcwidth-1.0.1.tgz",
             "integrity": "sha512-XHPEwS0q6TaxcvG85+8EYkbiCux2XtWG2mkc47Ng2A77BQu9+DqIOJldST4HgPkuea7dvKSj5VgX3P1d4rW8Tg==",
+            "license": "MIT",
             "dependencies": {
                 "defaults": "^1.0.3"
             }
@@ -1979,6 +2187,7 @@
             "version": "6.2.0",
             "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
             "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
+            "license": "MIT",
             "dependencies": {
                 "ansi-styles": "^4.0.0",
                 "string-width": "^4.1.0",
@@ -1992,6 +2201,7 @@
             "version": "4.3.0",
             "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
             "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+            "license": "MIT",
             "dependencies": {
                 "color-convert": "^2.0.1"
             },
@@ -2006,6 +2216,7 @@
             "version": "2.0.1",
             "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
             "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+            "license": "MIT",
             "dependencies": {
                 "color-name": "~1.1.4"
             },
@@ -2016,13 +2227,15 @@
         "node_modules/wrap-ansi/node_modules/color-name": {
             "version": "1.1.4",
             "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-            "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
+            "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+            "license": "MIT"
         },
         "node_modules/wrappy": {
             "version": "1.0.2",
             "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
             "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
-            "dev": true
+            "dev": true,
+            "license": "ISC"
         }
     }
 }
diff --git a/src/commands/TodoistCommand.ts b/src/commands/TodoistCommand.ts
index 654c2a3..bfb3782 100644
--- a/src/commands/TodoistCommand.ts
+++ b/src/commands/TodoistCommand.ts
@@ -90,7 +90,6 @@ export class TodoistCommand implements ISlashCommand {
 `;
 
     return sendNotification({
-      read: read,
       modify: modify,
       user: user,
       room: room,
diff --git a/src/commands/subcommands/authorize.ts b/src/commands/subcommands/authorize.ts
index ad26bb9..5303237 100644
--- a/src/commands/subcommands/authorize.ts
+++ b/src/commands/subcommands/authorize.ts
@@ -24,7 +24,6 @@ export async function authorize(
     read: read,
     modify: modify,
     user: user,
-    message: '',
     persistence: persistence,
     blocks: [textsectionBlock],
   });
diff --git a/src/commands/subcommands/labels.ts b/src/commands/subcommands/labels.ts
index a65f87b..51a560a 100644
--- a/src/commands/subcommands/labels.ts
+++ b/src/commands/subcommands/labels.ts
@@ -1,16 +1,16 @@
-import { HttpStatusCode, IModify } from '@rocket.chat/apps-engine/definition/accessors';
+import { IModify } from '@rocket.chat/apps-engine/definition/accessors';
 import { SlashCommandContext } from '@rocket.chat/apps-engine/definition/slashcommands';
 import { LayoutBlock } from '@rocket.chat/ui-kit';
 
 import { TodoistApp } from '../../../TodoistApp';
-import { MiscEnum } from '../../enums/Misc';
+import { BlockActionEnum } from '../../enums/BlockAction';
 import {
   getActionsBlock,
   getButton,
   getContextBlock,
   getSectionBlock,
 } from '../../helpers/blockBuilder';
-import { getLabelsUrl } from '../../helpers/const';
+import { sendNotification } from '../../helpers/message';
 import { ILabel } from '../../interfaces/labels';
 
 export async function labels(
@@ -18,38 +18,35 @@ export async function labels(
   modify: IModify,
   context: SlashCommandContext
 ): Promise<void> {
+  const logger = app.getLogger();
   const user = context.getSender();
   const room = context.getRoom();
+  const labelService = app.getLabelService();
 
-  const response = await app.getHttpHelperInstance().get(user, getLabelsUrl());
+  try {
+    const labels = await labelService.fetch(user);
+    if (labels.length === 0) {
+      const message = `No labels found for the user.`;
+      await sendNotification({ modify, user, room, message });
+      return;
+    }
+    const builder = modify.getCreator().startMessage().setRoom(room);
+    const blocks = (await Promise.all(labels.map(createLabelSection))).reduce(
+      (acc, val) => acc.concat(val),
+      []
+    ) as LayoutBlock[];
 
-  if (response.statusCode !== HttpStatusCode.OK) {
+    builder.setBlocks(blocks);
+    await modify.getNotifier().notifyUser(user, builder.getMessage());
+  } catch (error) {
+    logger.error(`Error fetching labels: ${error.message}`);
     const msg = modify
       .getCreator()
       .startMessage()
-      .setText(`❗️ Unable to retrieve labels! \n Error ${JSON.stringify(response)}`)
+      .setText(`❗️ Unable to retrieve labels! \n Error: ${error.message}`)
       .setRoom(room);
     await modify.getNotifier().notifyUser(user, msg.getMessage());
-    return;
   }
-
-  if (!response.data || response.data.length === 0) {
-    const msg = modify
-      .getCreator()
-      .startMessage()
-      .setText('No personal labels found. Create one using the Todoist app or website.')
-      .setRoom(room);
-    await modify.getNotifier().notifyUser(user, msg.getMessage());
-    return;
-  }
-
-  const builder = modify.getCreator().startMessage().setRoom(room);
-  const blocks = (await Promise.all(response.data.map(createLabelSection))).reduce(
-    (acc, val) => acc.concat(val),
-    []
-  ) as LayoutBlock[];
-  builder.setBlocks(blocks);
-  await modify.getNotifier().notifyUser(user, builder.getMessage());
 }
 
 async function createLabelSection(label: ILabel): Promise<LayoutBlock[]> {
@@ -60,22 +57,25 @@ async function createLabelSection(label: ILabel): Promise<LayoutBlock[]> {
   );
 
   const shareButton = getButton({
-    labelText: MiscEnum.SHARE_LABEL_BUTTON,
-    blockId: MiscEnum.LABEL_ACTIONS_BLOCK,
-    actionId: MiscEnum.SHARE_LABEL_ACTION_ID,
-    value: `${label.id}`,
+    labelText: BlockActionEnum.SHARE_LABEL_BUTTON,
+    blockId: BlockActionEnum.LABEL_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.SHARE_LABEL_ACTION_ID,
+    value: label.id,
     style: 'primary',
   });
 
   const deleteButton = getButton({
-    labelText: MiscEnum.DELETE_LABEL_BUTTON,
-    blockId: MiscEnum.LABEL_ACTIONS_BLOCK,
-    actionId: MiscEnum.DELETE_LABEL_ACTION_ID,
-    value: `${label.id}`,
+    labelText: BlockActionEnum.DELETE_LABEL_BUTTON,
+    blockId: BlockActionEnum.LABEL_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.DELETE_LABEL_ACTION_ID,
+    value: label.id,
     style: 'danger',
   });
 
-  const actionBlock = getActionsBlock(MiscEnum.LABEL_ACTIONS_BLOCK, [shareButton, deleteButton]);
+  const actionBlock = getActionsBlock(BlockActionEnum.LABEL_ACTIONS_BLOCK, [
+    shareButton,
+    deleteButton,
+  ]);
 
   return [labelNameBlock, labelContextBlock, actionBlock];
 }
diff --git a/src/commands/subcommands/projects.ts b/src/commands/subcommands/projects.ts
index 69d2b35..e5a72c0 100644
--- a/src/commands/subcommands/projects.ts
+++ b/src/commands/subcommands/projects.ts
@@ -1,16 +1,16 @@
-import { HttpStatusCode, IModify } from '@rocket.chat/apps-engine/definition/accessors';
+import { IModify } from '@rocket.chat/apps-engine/definition/accessors';
 import { SlashCommandContext } from '@rocket.chat/apps-engine/definition/slashcommands';
 import { LayoutBlock } from '@rocket.chat/ui-kit';
 
 import { TodoistApp } from '../../../TodoistApp';
-import { MiscEnum } from '../../enums/Misc';
+import { BlockActionEnum } from '../../enums/BlockAction';
 import {
   getActionsBlock,
   getButton,
   getContextBlock,
   getSectionBlock,
 } from '../../helpers/blockBuilder';
-import { getProjectsUrl } from '../../helpers/const';
+import { sendNotification } from '../../helpers/message';
 import { IProject } from '../../interfaces/projects';
 
 export async function projects(
@@ -18,39 +18,35 @@ export async function projects(
   modify: IModify,
   context: SlashCommandContext
 ): Promise<void> {
+  const logger = app.getLogger();
   const user = context.getSender();
   const room = context.getRoom();
+  const projectService = app.getProjectService();
 
-  const response = await app.getHttpHelperInstance().get(user, getProjectsUrl());
+  try {
+    const projects = await projectService.fetch(user);
+    if (projects.length === 0) {
+      const message = `No projects found for the user.`;
+      await sendNotification({ modify, user, room, message });
+      return;
+    }
+    const builder = modify.getCreator().startMessage().setRoom(room);
+    const blocks = (await Promise.all(projects.map(createProjectSection))).reduce(
+      (acc, val) => acc.concat(val),
+      []
+    ) as LayoutBlock[];
 
-  if (response.statusCode !== HttpStatusCode.OK) {
+    builder.setBlocks(blocks);
+    await modify.getNotifier().notifyUser(user, builder.getMessage());
+  } catch (error) {
+    logger.error(`Error fetching projects: ${error.message}`);
     const msg = modify
       .getCreator()
       .startMessage()
-      .setText(`❗️ Unable to retrieve projects! \n Error ${JSON.stringify(response)}`)
+      .setText(`❗️ Unable to retrieve projects! \n Error: ${error.message}`)
       .setRoom(room);
     await modify.getNotifier().notifyUser(user, msg.getMessage());
-    return;
   }
-
-  if (!response.data || response.data.length === 0) {
-    const msg = modify
-      .getCreator()
-      .startMessage()
-      .setText('No projects found. Create one using the Todoist app or website.')
-      .setRoom(room);
-    await modify.getNotifier().notifyUser(user, msg.getMessage());
-    return;
-  }
-
-  const builder = modify.getCreator().startMessage().setRoom(room);
-  const blocks = (await Promise.all(response.data.map(createProjectSection))).reduce(
-    (acc, val) => acc.concat(val),
-    []
-  ) as LayoutBlock[];
-
-  builder.setBlocks(blocks);
-  await modify.getNotifier().notifyUser(user, builder.getMessage());
 }
 
 async function createProjectSection(project: IProject): Promise<LayoutBlock[]> {
@@ -61,37 +57,37 @@ async function createProjectSection(project: IProject): Promise<LayoutBlock[]> {
   );
 
   const viewProjectButton = getButton({
-    labelText: MiscEnum.VIEW_PROJECT_BUTTON,
-    blockId: MiscEnum.PROJECT_ACTIONS_BLOCK,
-    actionId: MiscEnum.VIEW_PROJECT_ACTION_ID,
+    labelText: BlockActionEnum.VIEW_PROJECT_BUTTON,
+    blockId: BlockActionEnum.PROJECT_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.VIEW_PROJECT_ACTION_ID,
     value: `${project.url}`,
     style: 'success',
     url: `${project.url}`,
   });
 
   const shareProjectButton = getButton({
-    labelText: MiscEnum.SHARE_PROJECT_BUTTON,
-    blockId: MiscEnum.PROJECT_ACTIONS_BLOCK,
-    actionId: MiscEnum.SHARE_PROJECT_ACTION_ID,
+    labelText: BlockActionEnum.SHARE_PROJECT_BUTTON,
+    blockId: BlockActionEnum.PROJECT_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.SHARE_PROJECT_ACTION_ID,
     value: `${project.id}`,
     style: 'primary',
   });
 
   const createTaskInProjectButton = getButton({
-    labelText: MiscEnum.CREATE_TASK_IN_PROJECT_BUTTON,
-    blockId: MiscEnum.PROJECT_ACTIONS_BLOCK,
-    actionId: MiscEnum.CREATE_TASK_IN_PROJECT_BUTTON_ACTION_ID,
+    labelText: BlockActionEnum.CREATE_TASK_IN_PROJECT_BUTTON,
+    blockId: BlockActionEnum.PROJECT_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.CREATE_TASK_IN_PROJECT_BUTTON_ACTION_ID,
     value: `${project.id}`,
   });
 
   const getCommentsButton = getButton({
-    labelText: MiscEnum.GET_COMMENTS_BUTTON,
-    blockId: MiscEnum.PROJECT_ACTIONS_BLOCK,
-    actionId: MiscEnum.GET_COMMENTS_ACTION_ID,
+    labelText: BlockActionEnum.GET_COMMENTS_BUTTON,
+    blockId: BlockActionEnum.PROJECT_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.GET_COMMENTS_ACTION_ID,
     value: `${project.id}`,
   });
 
-  const projectActionBlock = getActionsBlock(MiscEnum.PROJECT_ACTIONS_BLOCK, [
+  const projectActionBlock = getActionsBlock(BlockActionEnum.PROJECT_ACTIONS_BLOCK, [
     viewProjectButton,
     shareProjectButton,
     createTaskInProjectButton,
diff --git a/src/commands/subcommands/sections.ts b/src/commands/subcommands/sections.ts
index 445911c..1acf81a 100644
--- a/src/commands/subcommands/sections.ts
+++ b/src/commands/subcommands/sections.ts
@@ -1,16 +1,16 @@
-import { HttpStatusCode, IModify } from '@rocket.chat/apps-engine/definition/accessors';
+import { IModify } from '@rocket.chat/apps-engine/definition/accessors';
 import { SlashCommandContext } from '@rocket.chat/apps-engine/definition/slashcommands';
 import { LayoutBlock } from '@rocket.chat/ui-kit';
 
 import { TodoistApp } from '../../../TodoistApp';
-import { MiscEnum } from '../../enums/Misc';
+import { BlockActionEnum } from '../../enums/BlockAction';
 import {
   getActionsBlock,
   getButton,
   getContextBlock,
   getSectionBlock,
 } from '../../helpers/blockBuilder';
-import { getSectionsUrl } from '../../helpers/const';
+import { sendNotification } from '../../helpers/message';
 import { ISection } from '../../interfaces/sections';
 
 export async function sections(
@@ -18,39 +18,35 @@ export async function sections(
   modify: IModify,
   context: SlashCommandContext
 ): Promise<void> {
+  const logger = app.getLogger();
   const user = context.getSender();
   const room = context.getRoom();
+  const sectionService = app.getSectionService();
 
-  const response = await app.getHttpHelperInstance().get(user, getSectionsUrl());
+  try {
+    const sections = await sectionService.fetch(user);
+    if (sections.length === 0) {
+      const message = `No projects found for the user.`;
+      await sendNotification({ modify, user, room, message });
+      return;
+    }
+    const builder = modify.getCreator().startMessage().setRoom(room);
+    const blocks = (await Promise.all(sections.map(createSectionBlock))).reduce(
+      (acc, val) => acc.concat(val),
+      []
+    ) as LayoutBlock[];
 
-  if (response.statusCode !== HttpStatusCode.OK) {
+    builder.setBlocks(blocks);
+    await modify.getNotifier().notifyUser(user, builder.getMessage());
+  } catch (error) {
+    logger.error(`Error fetching sections: ${error.message}`);
     const msg = modify
       .getCreator()
       .startMessage()
-      .setText(`❗️ Unable to retrieve sections! \n Error ${JSON.stringify(response)}`)
+      .setText(`❗️ Unable to retrieve sections! \n Error: ${error.message}`)
       .setRoom(room);
     await modify.getNotifier().notifyUser(user, msg.getMessage());
-    return;
   }
-
-  if (!response.data || response.data.length === 0) {
-    const msg = modify
-      .getCreator()
-      .startMessage()
-      .setText('No sections found. Create one using the Todoist app or website.')
-      .setRoom(room);
-    await modify.getNotifier().notifyUser(user, msg.getMessage());
-    return;
-  }
-
-  const builder = modify.getCreator().startMessage().setRoom(room);
-  const blocks = (await Promise.all(response.data.map(createSectionBlock))).reduce(
-    (acc, val) => acc.concat(val),
-    []
-  ) as LayoutBlock[];
-
-  builder.setBlocks(blocks);
-  await modify.getNotifier().notifyUser(user, builder.getMessage());
 }
 
 async function createSectionBlock(section: ISection): Promise<LayoutBlock[]> {
@@ -60,22 +56,25 @@ async function createSectionBlock(section: ISection): Promise<LayoutBlock[]> {
   );
 
   const shareButton = getButton({
-    labelText: MiscEnum.SHARE_SECTION_BUTTON,
-    blockId: MiscEnum.SECTION_ACTIONS_BLOCK,
-    actionId: MiscEnum.SHARE_SECTION_ACTION_ID,
+    labelText: BlockActionEnum.SHARE_SECTION_BUTTON,
+    blockId: BlockActionEnum.SECTION_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.SHARE_SECTION_ACTION_ID,
     value: `${section.id}`,
     style: 'primary',
   });
 
   const deleteButton = getButton({
-    labelText: MiscEnum.DELETE_SECTION_BUTTON,
-    blockId: MiscEnum.SECTION_ACTIONS_BLOCK,
-    actionId: MiscEnum.DELETE_SECTION_ACTION_ID,
+    labelText: BlockActionEnum.DELETE_SECTION_BUTTON,
+    blockId: BlockActionEnum.SECTION_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.DELETE_SECTION_ACTION_ID,
     value: `${section.id}`,
     style: 'danger',
   });
 
-  const actionBlock = getActionsBlock(MiscEnum.SECTION_ACTIONS_BLOCK, [shareButton, deleteButton]);
+  const actionBlock = getActionsBlock(BlockActionEnum.SECTION_ACTIONS_BLOCK, [
+    shareButton,
+    deleteButton,
+  ]);
 
   return [sectionNameBlock, sectionContextBlock, actionBlock];
 }
diff --git a/src/commands/subcommands/sharedLabels.ts b/src/commands/subcommands/sharedLabels.ts
index 651d0a9..6f38eab 100644
--- a/src/commands/subcommands/sharedLabels.ts
+++ b/src/commands/subcommands/sharedLabels.ts
@@ -1,86 +1,77 @@
-import { HttpStatusCode, IModify } from '@rocket.chat/apps-engine/definition/accessors';
+import { IModify } from '@rocket.chat/apps-engine/definition/accessors';
 import { SlashCommandContext } from '@rocket.chat/apps-engine/definition/slashcommands';
 import { LayoutBlock } from '@rocket.chat/ui-kit';
 
 import { TodoistApp } from '../../../TodoistApp';
-import { MiscEnum } from '../../enums/Misc';
+import { BlockActionEnum } from '../../enums/BlockAction';
 import { getActionsBlock, getButton, getSectionBlock } from '../../helpers/blockBuilder';
-import { getSharedLabelsUrl } from '../../helpers/const';
+import { sendNotification } from '../../helpers/message';
+import { ILabel } from '../../interfaces/labels';
 
 export async function sharedLabels(
   app: TodoistApp,
   modify: IModify,
   context: SlashCommandContext
 ): Promise<void> {
+  const logger = app.getLogger();
   const user = context.getSender();
   const room = context.getRoom();
+  const sharedLabelService = app.getSharedLabelService();
 
-  const response = await app.getHttpHelperInstance().get(
-    user,
-    getSharedLabelsUrl(true) // true to omit personal labels
-  );
+  try {
+    const labels = await sharedLabelService.fetch(user);
 
-  if (response.statusCode !== HttpStatusCode.OK) {
-    const msg = modify
-      .getCreator()
-      .startMessage()
-      .setText(`❗️ Unable to retrieve shared labels! \n Error ${JSON.stringify(response)}`)
-      .setRoom(room);
-    await modify.getNotifier().notifyUser(user, msg.getMessage());
-    return;
-  }
+    if (labels.length === 0) {
+      const message = `No shared labels found for the user.`;
+      await sendNotification({ modify, user, room, message });
+      return;
+    }
+    const builder = modify.getCreator().startMessage().setRoom(room);
+    const blocks = (await Promise.all(labels.map(createSharedLabelSection))).reduce(
+      (acc, val) => acc.concat(val),
+      []
+    ) as LayoutBlock[];
 
-  if (!response.data || response.data.length === 0) {
+    builder.setBlocks(blocks);
+    await modify.getNotifier().notifyUser(user, builder.getMessage());
+  } catch (error) {
+    logger.error(`Error fetching shared labels: ${error.message}`);
     const msg = modify
       .getCreator()
       .startMessage()
-      .setText(
-        'No shared labels found. Shared labels appear when collaborators add labels to shared tasks.'
-      )
+      .setText(`❗️ Unable to retrieve shared labels! \n Error: ${error.message}`)
       .setRoom(room);
     await modify.getNotifier().notifyUser(user, msg.getMessage());
-    return;
   }
-
-  const builder = modify.getCreator().startMessage().setRoom(room);
-  const headerBlock = getSectionBlock('📑 Shared Labels');
-  const labelBlocks = (await Promise.all(response.data.map(createSharedLabelSection))).reduce(
-    (acc, val) => acc.concat(val),
-    []
-  ) as LayoutBlock[];
-  const blocks: LayoutBlock[] = [headerBlock, ...labelBlocks];
-
-  builder.setBlocks(blocks);
-  await modify.getNotifier().notifyUser(user, builder.getMessage());
 }
 
-async function createSharedLabelSection(labelName: string): Promise<LayoutBlock[]> {
-  const labelNameBlock = getSectionBlock(labelName);
+async function createSharedLabelSection(label: ILabel): Promise<LayoutBlock[]> {
+  const labelNameBlock = getSectionBlock(label.name);
 
   const renameButton = getButton({
-    labelText: MiscEnum.RENAME_SHARED_LABEL_BUTTON,
-    blockId: MiscEnum.SHARED_LABEL_ACTIONS_BLOCK,
-    actionId: MiscEnum.RENAME_SHARED_LABEL_ACTION_ID,
-    value: labelName,
+    labelText: BlockActionEnum.RENAME_SHARED_LABEL_BUTTON,
+    blockId: BlockActionEnum.SHARED_LABEL_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.RENAME_SHARED_LABEL_ACTION_ID,
+    value: label.name,
   });
 
   const removeButton = getButton({
-    labelText: MiscEnum.REMOVE_SHARED_LABEL_BUTTON,
-    blockId: MiscEnum.SHARED_LABEL_ACTIONS_BLOCK,
-    actionId: MiscEnum.REMOVE_SHARED_LABEL_ACTION_ID,
-    value: labelName,
+    labelText: BlockActionEnum.REMOVE_SHARED_LABEL_BUTTON,
+    blockId: BlockActionEnum.SHARED_LABEL_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.REMOVE_SHARED_LABEL_ACTION_ID,
+    value: label.name,
     style: 'danger',
   });
 
   const convertButton = getButton({
-    labelText: MiscEnum.CONVERT_TO_PERSONAL_LABEL_BUTTON,
-    blockId: MiscEnum.SHARED_LABEL_ACTIONS_BLOCK,
-    actionId: MiscEnum.CONVERT_TO_PERSONAL_LABEL_ACTION_ID,
-    value: labelName,
+    labelText: BlockActionEnum.CONVERT_TO_PERSONAL_LABEL_BUTTON,
+    blockId: BlockActionEnum.SHARED_LABEL_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.CONVERT_TO_PERSONAL_LABEL_ACTION_ID,
+    value: label.name,
     style: 'primary',
   });
 
-  const actionBlock = getActionsBlock(MiscEnum.SHARED_LABEL_ACTIONS_BLOCK, [
+  const actionBlock = getActionsBlock(BlockActionEnum.SHARED_LABEL_ACTIONS_BLOCK, [
     renameButton,
     removeButton,
     convertButton,
diff --git a/src/commands/subcommands/task.ts b/src/commands/subcommands/task.ts
index 4287cb8..aa8dec8 100644
--- a/src/commands/subcommands/task.ts
+++ b/src/commands/subcommands/task.ts
@@ -1,4 +1,4 @@
-import { IModify, IPersistence, IRead } from '@rocket.chat/apps-engine/definition/accessors';
+import { IModify } from '@rocket.chat/apps-engine/definition/accessors';
 import { SlashCommandContext } from '@rocket.chat/apps-engine/definition/slashcommands';
 
 import { createTaskModal } from '../../modals/createTaskModal';
diff --git a/src/commands/subcommands/tasks.ts b/src/commands/subcommands/tasks.ts
index 8986adf..30e214e 100644
--- a/src/commands/subcommands/tasks.ts
+++ b/src/commands/subcommands/tasks.ts
@@ -1,16 +1,16 @@
-import { HttpStatusCode, IModify } from '@rocket.chat/apps-engine/definition/accessors';
+import { IModify } from '@rocket.chat/apps-engine/definition/accessors';
 import { SlashCommandContext } from '@rocket.chat/apps-engine/definition/slashcommands';
 import { LayoutBlock } from '@rocket.chat/ui-kit';
 
 import { TodoistApp } from '../../../TodoistApp';
-import { MiscEnum } from '../../enums/Misc';
+import { BlockActionEnum } from '../../enums/BlockAction';
 import {
   getActionsBlock,
   getButton,
   getContextBlock,
   getSectionBlock,
 } from '../../helpers/blockBuilder';
-import { getTasksUrl } from '../../helpers/const';
+import { sendNotification } from '../../helpers/message';
 import { ITask } from '../../interfaces/tasks';
 
 export async function tasks(
@@ -18,39 +18,35 @@ export async function tasks(
   modify: IModify,
   context: SlashCommandContext
 ): Promise<void> {
+  const logger = app.getLogger();
   const user = context.getSender();
   const room = context.getRoom();
+  const taskService = app.getTaskService();
 
-  const response = await app.getHttpHelperInstance().get(user, getTasksUrl());
+  try {
+    const tasks = await taskService.fetch(user);
+    if (tasks.length === 0) {
+      const message = `No tasks found for the user.`;
+      await sendNotification({ modify, user, room, message });
+      return;
+    }
+    const builder = modify.getCreator().startMessage().setRoom(room);
+    const blocks = (await Promise.all(tasks.map(createTaskSection))).reduce(
+      (acc, val) => acc.concat(val),
+      []
+    ) as LayoutBlock[];
 
-  if (response.statusCode !== HttpStatusCode.OK) {
+    builder.setBlocks(blocks);
+    await modify.getNotifier().notifyUser(user, builder.getMessage());
+  } catch (error) {
+    logger.error(`Error fetching tasks: ${error.message}`);
     const msg = modify
       .getCreator()
       .startMessage()
-      .setText(`❗️ Unable to retrieve tasks! \n Error ${JSON.stringify(response)}`)
+      .setText(`❗️ Unable to retrieve tasks! \n Error: ${error.message}`)
       .setRoom(room);
     await modify.getNotifier().notifyUser(user, msg.getMessage());
-    return;
   }
-
-  if (!response.data || response.data.length === 0) {
-    const msg = modify
-      .getCreator()
-      .startMessage()
-      .setText('No tasks found. Create one using the Todoist app or website.')
-      .setRoom(room);
-    await modify.getNotifier().notifyUser(user, msg.getMessage());
-    return;
-  }
-
-  const builder = modify.getCreator().startMessage().setRoom(room);
-  const blocks = (await Promise.all(response.data.map(createTaskSection))).reduce(
-    (acc, val) => acc.concat(val),
-    []
-  ) as LayoutBlock[];
-
-  builder.setBlocks(blocks);
-  await modify.getNotifier().notifyUser(user, builder.getMessage());
 }
 
 async function createTaskSection(task: ITask): Promise<LayoutBlock[]> {
@@ -62,38 +58,38 @@ async function createTaskSection(task: ITask): Promise<LayoutBlock[]> {
   );
 
   const viewButton = getButton({
-    labelText: MiscEnum.VIEW_TASK_BUTTON,
-    blockId: MiscEnum.TASK_ACTIONS_BLOCK,
-    actionId: MiscEnum.VIEW_TASK_ACTION_ID,
+    labelText: BlockActionEnum.VIEW_TASK_BUTTON,
+    blockId: BlockActionEnum.TASK_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.VIEW_TASK_ACTION_ID,
     value: `${task.url}`,
     style: 'success',
     url: `${task.url}`,
   });
 
   const shareButton = getButton({
-    labelText: MiscEnum.SHARE_TASK_BUTTON,
-    blockId: MiscEnum.TASK_ACTIONS_BLOCK,
-    actionId: MiscEnum.SHARE_TASK_ACTION_ID,
+    labelText: BlockActionEnum.SHARE_TASK_BUTTON,
+    blockId: BlockActionEnum.TASK_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.SHARE_TASK_ACTION_ID,
     value: `${task.id}`,
     style: 'primary',
   });
 
   const getCommentsButton = getButton({
-    labelText: MiscEnum.GET_COMMENTS_BUTTON,
-    blockId: MiscEnum.TASK_ACTIONS_BLOCK,
-    actionId: MiscEnum.GET_COMMENTS_ACTION_ID,
+    labelText: BlockActionEnum.GET_COMMENTS_BUTTON,
+    blockId: BlockActionEnum.TASK_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.GET_COMMENTS_ACTION_ID,
     value: `${task.id}`,
   });
 
   const deleteButton = getButton({
-    labelText: MiscEnum.DELETE_TASK_BUTTON,
-    blockId: MiscEnum.TASK_ACTIONS_BLOCK,
-    actionId: MiscEnum.DELETE_TASK_ACTION_ID,
+    labelText: BlockActionEnum.DELETE_TASK_BUTTON,
+    blockId: BlockActionEnum.TASK_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.DELETE_TASK_ACTION_ID,
     value: `${task.id}`,
     style: 'danger',
   });
 
-  const actionBlock = getActionsBlock(MiscEnum.TASK_ACTIONS_BLOCK, [
+  const actionBlock = getActionsBlock(BlockActionEnum.TASK_ACTIONS_BLOCK, [
     viewButton,
     shareButton,
     getCommentsButton,
diff --git a/src/enums/Misc.ts b/src/enums/BlockAction.ts
similarity index 98%
rename from src/enums/Misc.ts
rename to src/enums/BlockAction.ts
index b4cb92f..fc6f36b 100644
--- a/src/enums/Misc.ts
+++ b/src/enums/BlockAction.ts
@@ -1,4 +1,4 @@
-export enum MiscEnum {
+export enum BlockActionEnum {
   GET_SECTIONS_BUTTON = 'Get Sections',
   GET_SECTIONS_ACTION_ID = 'get-sections',
   GET_PROJECTS_BUTTON = 'Get Projects',
diff --git a/src/handlers/actionButtonInteraction.ts b/src/handlers/ExecuteActionButtonHandler.ts
similarity index 86%
rename from src/handlers/actionButtonInteraction.ts
rename to src/handlers/ExecuteActionButtonHandler.ts
index 3a0063f..917f1bf 100644
--- a/src/handlers/actionButtonInteraction.ts
+++ b/src/handlers/ExecuteActionButtonHandler.ts
@@ -5,7 +5,7 @@ import {
 } from '@rocket.chat/apps-engine/definition/uikit';
 
 import { TodoistApp } from '../../TodoistApp';
-import { MiscEnum } from '../enums/Misc';
+import { BlockActionEnum } from '../enums/BlockAction';
 import { createTaskModal } from '../modals/createTaskModal';
 
 export class ExecuteActionButtonHandler {
@@ -22,13 +22,10 @@ export class ExecuteActionButtonHandler {
       logger.warn('Room data not present in context.');
       return context.getInteractionResponder().errorResponse();
     }
-    logger.debug(
-      `Action ID: ${actionId}, Trigger ID: ${triggerId}, User ID: ${user.id}, Room ID: ${room.id}`
-    );
 
     try {
       switch (actionId) {
-        case MiscEnum.CREATE_TASK_FROM_MESSAGE_BUTTON_ACTION_ID:
+        case BlockActionEnum.CREATE_TASK_FROM_MESSAGE_BUTTON_ACTION_ID:
           const createTaskFromMessageModal = await createTaskModal({
             descriptionText: message?.text,
             projectId: undefined,
diff --git a/src/handlers/ExecuteBlockActionHandler.ts b/src/handlers/ExecuteBlockActionHandler.ts
new file mode 100644
index 0000000..a146da9
--- /dev/null
+++ b/src/handlers/ExecuteBlockActionHandler.ts
@@ -0,0 +1,94 @@
+import { IModify } from '@rocket.chat/apps-engine/definition/accessors';
+import {
+  IUIKitResponse,
+  UIKitBlockInteractionContext,
+} from '@rocket.chat/apps-engine/definition/uikit';
+
+import { TodoistApp } from '../../TodoistApp';
+import { BlockActionEnum } from '../enums/BlockAction';
+import { sendMessage } from '../helpers/message';
+import { createTaskModal } from '../modals/createTaskModal';
+import { deleteConfirmationModal } from '../modals/deleteConfirmationModal';
+import { getComments } from './subhandlers/getComments';
+
+export class ExecuteBlockActionHandler {
+  constructor(
+    private readonly app: TodoistApp,
+    private readonly modify: IModify
+  ) {}
+
+  public async run(context: UIKitBlockInteractionContext): Promise<IUIKitResponse> {
+    const data = context.getInteractionData();
+    const { actionId, user, triggerId, room, value } = data;
+    const logger = this.app.getLogger();
+    if (!room) {
+      logger.error('Room data not present in context.');
+      return context.getInteractionResponder().errorResponse();
+    }
+    if (!value) {
+      logger.error('Value is missing in context.');
+      return context.getInteractionResponder().errorResponse();
+    }
+
+    const projectService = this.app.getProjectService();
+    const taskService = this.app.getTaskService();
+    const sectionService = this.app.getSectionService();
+    const commentService = this.app.getCommentService();
+    let message: string;
+    try {
+      switch (actionId) {
+        case BlockActionEnum.CREATE_TASK_IN_PROJECT_BUTTON_ACTION_ID:
+          const createTaskFromProjectModal = await createTaskModal({
+            projectId: data.value,
+            roomId: room.id,
+          });
+          await this.modify
+            .getUiController()
+            .openSurfaceView(createTaskFromProjectModal, data, user);
+          return context.getInteractionResponder().successResponse();
+        case BlockActionEnum.SHARE_PROJECT_ACTION_ID:
+          const [project] = await projectService.fetch(user, value);
+          message = `[${project.name}](${project.url}) | Comments: ${project.comment_count} | Color: ${project.color} | Favourite: ${project.is_favorite ? 'Yes' : 'No'}`;
+          await sendMessage({ modify: this.modify, room, message });
+          return context.getInteractionResponder().successResponse();
+        case BlockActionEnum.SHARE_TASK_ACTION_ID:
+          const [task] = await taskService.fetch(user, value);
+          const dueInfo = task.due ? `Due: ${task.due.string || task.due.date}` : 'No due date';
+          message = `[${task.content}](${task.url}) | ${dueInfo} | Priority: ${task.priority} | Labels: ${task.labels.join(', ')} | Comments: ${task.comment_count}`;
+          await sendMessage({ modify: this.modify, room, message });
+          return context.getInteractionResponder().successResponse();
+        case BlockActionEnum.SHARE_SECTION_ACTION_ID:
+          const [section] = await sectionService.fetch(user, value);
+          message = `Section: ${section.name} | Project ID: ${section.project_id} | Order: ${section.order}`;
+          await sendMessage({ modify: this.modify, room, message });
+          return context.getInteractionResponder().successResponse();
+        case BlockActionEnum.SHARE_COMMENT_ACTION_ID:
+          const [comment] = await commentService.fetch(user, value);
+          const attachment = comment.attachment
+            ? `| Attachment: [${comment.attachment.file_name}](${comment.attachment.file_url})`
+            : '';
+          message = `${comment.content} | Posted: ${new Date(comment.posted_at).toLocaleString()} ${attachment}`;
+          await sendMessage({ modify: this.modify, room, message });
+          return context.getInteractionResponder().successResponse();
+        case BlockActionEnum.GET_COMMENTS_ACTION_ID:
+          await getComments(this.app, this.modify, context);
+        case BlockActionEnum.DELETE_TASK_ACTION_ID:
+        case BlockActionEnum.DELETE_SECTION_ACTION_ID:
+        case BlockActionEnum.DELETE_LABEL_ACTION_ID:
+        case BlockActionEnum.DELETE_COMMENT_ACTION_ID:
+          const modal = await deleteConfirmationModal({ itemId: value, actionId, roomId: room.id });
+          await this.modify.getUiController().openSurfaceView(modal, data, user);
+          return context.getInteractionResponder().successResponse();
+        default:
+          logger.warn(`Invalid Action ID: ${actionId} received.`);
+          return context.getInteractionResponder().errorResponse();
+      }
+    } catch (error) {
+      logger.error(error.message);
+      return context.getInteractionResponder().viewErrorResponse({
+        viewId: actionId,
+        errors: error?.message,
+      });
+    }
+  }
+}
diff --git a/src/handlers/viewSubmitInteraction.ts b/src/handlers/ExecuteViewSubmitHandler.ts
similarity index 50%
rename from src/handlers/viewSubmitInteraction.ts
rename to src/handlers/ExecuteViewSubmitHandler.ts
index 6dcdcbb..89ce06b 100644
--- a/src/handlers/viewSubmitInteraction.ts
+++ b/src/handlers/ExecuteViewSubmitHandler.ts
@@ -3,10 +3,11 @@ import { UIKitViewSubmitInteractionContext } from '@rocket.chat/apps-engine/defi
 
 import { TodoistApp } from '../../TodoistApp';
 import { ModalsEnum } from '../enums/Modals';
-import { createTask } from '../lib/create/createTask';
-import { deleteComment, deleteLabel, deleteSection, deleteTask } from '../lib/delete/deleteItem';
+import { sendNotification } from '../helpers/message';
+import { IViewSubmitHandler } from '../interfaces/app';
+import { createTask } from './subhandlers/createTask';
 
-export class ExecuteViewSubmitHandler {
+export class ExecuteViewSubmitHandler implements IViewSubmitHandler {
   constructor(
     private readonly app: TodoistApp,
     private readonly read: IRead,
@@ -14,23 +15,29 @@ export class ExecuteViewSubmitHandler {
   ) {}
 
   public async run(context: UIKitViewSubmitInteractionContext) {
-    const data = context.getInteractionData();
-    let { view, room } = data;
-    const elements = view.id.split('#');
-    const viewId = elements[0];
-    const roomId = elements[1];
     const logger = this.app.getLogger();
+    const data = context.getInteractionData();
+    let { view, room, user } = data;
+    const itemId = view.submit?.value;
+    if (!itemId) {
+      logger.error('Surface View Submit button has no associated value!');
+      return context.getInteractionResponder().errorResponse();
+    }
+
+    const [viewId, roomId] = view.id.split('#');
 
     if (!room) {
       logger.warn('Room data not present in context.');
       room = await this.read.getRoomReader().getById(roomId);
       if (!room) {
-        logger.warn(`Room with id: ${roomId} does not exist.`);
+        logger.error(`Room with id: ${roomId} does not exist.`);
         return context.getInteractionResponder().errorResponse();
       }
     }
-
-    logger.debug(viewId, room.id);
+    const labelService = this.app.getLabelService();
+    const taskService = this.app.getTaskService();
+    const sectionService = this.app.getSectionService();
+    const commentService = this.app.getCommentService();
 
     try {
       switch (viewId) {
@@ -38,27 +45,38 @@ export class ExecuteViewSubmitHandler {
           await createTask({ app: this.app, context, room, modify: this.modify });
           return context.getInteractionResponder().successResponse();
         case ModalsEnum.DELETE_TASK:
-          await deleteTask({ app: this.app, context, room, read: this.read, modify: this.modify });
-          return context.getInteractionResponder().successResponse();
-        case ModalsEnum.DELETE_SECTION:
-          await deleteSection({
-            app: this.app,
-            context,
+          await taskService.delete(user, itemId);
+          await sendNotification({
+            modify: this.modify,
+            user,
             room,
-            read: this.read,
+            message: '✅ Task deleted successfully!',
+          });
+        case ModalsEnum.DELETE_SECTION:
+          await sectionService.delete(user, itemId);
+          await sendNotification({
             modify: this.modify,
+            user,
+            room,
+            message: '✅ Section deleted successfully!',
           });
           return context.getInteractionResponder().successResponse();
         case ModalsEnum.DELETE_LABEL:
-          await deleteLabel({ app: this.app, context, room, read: this.read, modify: this.modify });
+          await labelService.delete(user, itemId);
+          await sendNotification({
+            modify: this.modify,
+            user,
+            room,
+            message: '✅ Label deleted successfully!',
+          });
           return context.getInteractionResponder().successResponse();
         case ModalsEnum.DELETE_COMMENT:
-          await deleteComment({
-            app: this.app,
-            context,
-            room,
-            read: this.read,
+          await commentService.delete(user, itemId);
+          await sendNotification({
             modify: this.modify,
+            user,
+            room,
+            message: '✅ Comment deleted successfully!',
           });
           return context.getInteractionResponder().successResponse();
         default:
@@ -67,9 +85,15 @@ export class ExecuteViewSubmitHandler {
       }
     } catch (error) {
       logger.error(error);
+      await sendNotification({
+        modify: this.modify,
+        user,
+        room,
+        message: `❗️ Unable to process your request! \nError: ${error.message}`,
+      });
       return context.getInteractionResponder().viewErrorResponse({
         viewId: data.view.id,
-        errors: error,
+        errors: error.message,
       });
     }
   }
diff --git a/src/handlers/blockInteraction.ts b/src/handlers/blockInteraction.ts
deleted file mode 100644
index 268f3c5..0000000
--- a/src/handlers/blockInteraction.ts
+++ /dev/null
@@ -1,78 +0,0 @@
-import { IModify } from '@rocket.chat/apps-engine/definition/accessors';
-import {
-  IUIKitResponse,
-  UIKitBlockInteractionContext,
-} from '@rocket.chat/apps-engine/definition/uikit';
-
-import { TodoistApp } from '../../TodoistApp';
-import { MiscEnum } from '../enums/Misc';
-import { handleDeleteAction } from '../lib/delete/deleteItem';
-import { getComments } from '../lib/fetch/fetchComments';
-import { shareComment } from '../lib/share/shareComment';
-import { shareProject } from '../lib/share/shareProject';
-import { shareSection } from '../lib/share/shareSection';
-import { shareTask } from '../lib/share/shareTask';
-import { createTaskModal } from '../modals/createTaskModal';
-
-export class ExecuteBlockActionHandler {
-  constructor(
-    private readonly app: TodoistApp,
-    private readonly modify: IModify
-  ) {}
-
-  public async run(context: UIKitBlockInteractionContext): Promise<IUIKitResponse> {
-    const data = context.getInteractionData();
-    const { actionId, user, triggerId, room } = data;
-    const logger = this.app.getLogger();
-    if (!room) {
-      logger.warn('Room data not present in context.');
-      return context.getInteractionResponder().errorResponse();
-    }
-    logger.debug(
-      `Action ID: ${actionId}, Trigger ID: ${triggerId}, User ID: ${user.id}, Room ID: ${room.id}`
-    );
-    try {
-      switch (actionId) {
-        case MiscEnum.CREATE_TASK_IN_PROJECT_BUTTON_ACTION_ID:
-          const createTaskFromProjectModal = await createTaskModal({
-            projectId: data.value,
-            roomId: room.id,
-          });
-          await this.modify
-            .getUiController()
-            .openSurfaceView(createTaskFromProjectModal, data, user);
-          return context.getInteractionResponder().successResponse();
-        case MiscEnum.SHARE_PROJECT_ACTION_ID:
-          await shareProject({ app: this.app, context, modify: this.modify });
-          return context.getInteractionResponder().successResponse();
-        case MiscEnum.SHARE_TASK_ACTION_ID:
-          await shareTask({ app: this.app, context, modify: this.modify });
-          return context.getInteractionResponder().successResponse();
-        case MiscEnum.SHARE_SECTION_ACTION_ID:
-          await shareSection({ app: this.app, context, modify: this.modify });
-          return context.getInteractionResponder().successResponse();
-        case MiscEnum.SHARE_COMMENT_ACTION_ID:
-          await shareComment({ app: this.app, context, modify: this.modify });
-          return context.getInteractionResponder().successResponse();
-        case MiscEnum.GET_COMMENTS_ACTION_ID:
-          await getComments(this.app, this.modify, context);
-          return context.getInteractionResponder().successResponse();
-        case MiscEnum.DELETE_TASK_ACTION_ID:
-        case MiscEnum.DELETE_SECTION_ACTION_ID:
-        case MiscEnum.DELETE_LABEL_ACTION_ID:
-        case MiscEnum.DELETE_COMMENT_ACTION_ID:
-          await handleDeleteAction(this.app, context, this.modify);
-          return context.getInteractionResponder().successResponse();
-        default:
-          logger.warn(`Invalid Action ID: ${actionId} received.`);
-          return context.getInteractionResponder().errorResponse();
-      }
-    } catch (error) {
-      logger.error(error);
-      return context.getInteractionResponder().viewErrorResponse({
-        viewId: actionId,
-        errors: error,
-      });
-    }
-  }
-}
diff --git a/src/lib/create/createTask.ts b/src/handlers/subhandlers/createTask.ts
similarity index 78%
rename from src/lib/create/createTask.ts
rename to src/handlers/subhandlers/createTask.ts
index 0e5771e..7bbeb15 100644
--- a/src/lib/create/createTask.ts
+++ b/src/handlers/subhandlers/createTask.ts
@@ -1,11 +1,10 @@
-import { HttpStatusCode, IModify } from '@rocket.chat/apps-engine/definition/accessors';
+import { IModify } from '@rocket.chat/apps-engine/definition/accessors';
 import { IRoom } from '@rocket.chat/apps-engine/definition/rooms';
 import { UIKitViewSubmitInteractionContext } from '@rocket.chat/apps-engine/definition/uikit';
 import { IUser } from '@rocket.chat/apps-engine/definition/users';
 
 import { TodoistApp } from '../../../TodoistApp';
 import { ModalsEnum } from '../../enums/Modals';
-import { getTasksUrl } from '../../helpers/const';
 
 export async function createTask({
   app,
@@ -35,7 +34,7 @@ export async function createTask({
 
   if (!taskName) {
     const error = 'Task name is missing!';
-    logger.error(error);
+    logger.error(error + ' | TriggerID: ' + data.triggerId);
     const msg = modify
       .getCreator()
       .startMessage()
@@ -44,34 +43,33 @@ export async function createTask({
     await modify.getNotifier().notifyUser(user, msg.getMessage());
   }
 
-  const body = {
+  const tomorrow = new Date(Date.now() + 86400000).toISOString().split('T')[0];
+
+  const task = {
     content: `${taskName}`,
     ...(description && { description }),
     ...(project_id && { project_id }),
     due_date: taskdueDate
       ? new Date(taskdueDate).toISOString().split('T')[0] // Formatted as YYYY-MM-DD
-      : new Date(Date.now() + 86400000).toISOString().split('T')[0], // Tomorrow's date
+      : tomorrow,
     priority: parseInt(taskPriority),
   };
 
-  const url = getTasksUrl();
-
-  const response = await app.getHttpHelperInstance().post(user, url, { data: body });
-
-  if (response.statusCode === HttpStatusCode.OK) {
+  try {
+    const createdTask = await app.getTaskService().create(user, task);
     const msg = modify
       .getCreator()
       .startMessage()
       .setText(
-        `✅️ Task created successfully! \n Task: [${taskName}](${response.data.url}) | When: ${response.data.due.string}`
+        `✅️ Task created successfully! \n Task: [${taskName}](${createdTask.url}) | When: ${createdTask.due.string}`
       )
       .setRoom(room!);
     await modify.getNotifier().notifyUser(user, msg.getMessage());
-  } else {
+  } catch (error) {
     const msg = modify
       .getCreator()
       .startMessage()
-      .setText(`❗️ Unable to create task! \n Error ${JSON.stringify(response)}`)
+      .setText(`❗️ Unable to create task! \n Error ${error?.memssage}`)
       .setRoom(room!);
     await modify.getNotifier().notifyUser(user, msg.getMessage());
   }
diff --git a/src/handlers/subhandlers/getComments.ts b/src/handlers/subhandlers/getComments.ts
new file mode 100644
index 0000000..c3495ba
--- /dev/null
+++ b/src/handlers/subhandlers/getComments.ts
@@ -0,0 +1,98 @@
+import { IModify } from '@rocket.chat/apps-engine/definition/accessors';
+import {
+  IUIKitResponse,
+  UIKitBlockInteractionContext,
+} from '@rocket.chat/apps-engine/definition/uikit';
+import { LayoutBlock } from '@rocket.chat/ui-kit';
+
+import { TodoistApp } from '../../../TodoistApp';
+import { BlockActionEnum } from '../../enums/BlockAction';
+import {
+  getActionsBlock,
+  getButton,
+  getContextBlock,
+  getSectionBlock,
+} from '../../helpers/blockBuilder';
+import { sendNotification } from '../../helpers/message';
+
+interface IComment {
+  id: string;
+  content: string;
+  posted_at: string;
+  attachment?: {
+    file_name: string;
+  };
+}
+
+export async function getComments(
+  app: TodoistApp,
+  modify: IModify,
+  context: UIKitBlockInteractionContext
+): Promise<IUIKitResponse> {
+  const logger = app.getLogger();
+  const data = context.getInteractionData();
+  const { user, room, value, blockId } = data;
+  if (!room) {
+    logger.error('Room info not found in context.');
+    return context.getInteractionResponder().errorResponse();
+  }
+  const isProject = blockId.includes('project');
+
+  const comments = await app
+    .getCommentService()
+    .fetch(user, undefined, isProject ? undefined : value, isProject ? value : undefined);
+
+  if (comments.length === 0) {
+    const message = `No comments found on ${isProject ? 'project' : 'task'} ${value}. Create one using the Todoist app or website.`;
+    await sendNotification({ modify, user, room, message });
+    return context.getInteractionResponder().errorResponse();
+  }
+
+  const builder = modify.getCreator().startMessage().setRoom(room!);
+  const blocks = (
+    await Promise.all(comments.map((comment: IComment) => createCommentSection(comment)))
+  ).reduce((acc, val) => acc.concat(val), []) as LayoutBlock[];
+
+  builder.setBlocks(blocks);
+  await modify.getNotifier().notifyUser(user, builder.getMessage());
+  return context.getInteractionResponder().successResponse();
+}
+
+async function createCommentSection(comment: IComment): Promise<LayoutBlock[]> {
+  const blocks: LayoutBlock[] = [];
+
+  const commentContentBlock = getSectionBlock(comment.content);
+  const commentContextBlock = getContextBlock(
+    `Posted: ${new Date(comment.posted_at).toLocaleString()}`
+  );
+  blocks.push(commentContentBlock, commentContextBlock);
+
+  const shareButton = getButton({
+    labelText: BlockActionEnum.SHARE_COMMENT_BUTTON,
+    blockId: BlockActionEnum.COMMENT_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.SHARE_COMMENT_ACTION_ID,
+    value: `${comment.id}`,
+    style: 'primary',
+  });
+
+  const deleteButton = getButton({
+    labelText: BlockActionEnum.DELETE_COMMENT_BUTTON,
+    blockId: BlockActionEnum.COMMENT_ACTIONS_BLOCK,
+    actionId: BlockActionEnum.DELETE_COMMENT_ACTION_ID,
+    value: `${comment.id}`,
+    style: 'danger',
+  });
+
+  const actionBlock = getActionsBlock(BlockActionEnum.COMMENT_ACTIONS_BLOCK, [
+    shareButton,
+    deleteButton,
+  ]);
+  blocks.push(actionBlock);
+
+  if (comment.attachment) {
+    const attachmentBlock = getSectionBlock(`📎 Attachment: ${comment.attachment.file_name}`);
+    blocks.push(attachmentBlock);
+  }
+
+  return blocks;
+}
diff --git a/src/helpers/blockBuilder.ts b/src/helpers/blockBuilder.ts
index 0fc747a..eb314b5 100644
--- a/src/helpers/blockBuilder.ts
+++ b/src/helpers/blockBuilder.ts
@@ -14,7 +14,6 @@ import {
 
 import { AppEnum } from '../enums/App';
 
-// Interfaces for common parameters
 interface BaseElementParams {
   blockId?: string;
   actionId?: string;
diff --git a/src/helpers/const.ts b/src/helpers/const.ts
index 9a71c7e..dd3563b 100644
--- a/src/helpers/const.ts
+++ b/src/helpers/const.ts
@@ -1,9 +1,4 @@
-const ApiBaseUrl: string = 'https://api.todoist.com/rest';
-
-const ApiVersion = {
-  V1: 'v1',
-  V2: 'v2',
-};
+const ApiBaseUrl: string = 'https://api.todoist.com/rest/v2';
 
 const ApiEndpoint = {
   Projects: 'projects',
@@ -24,57 +19,57 @@ const ApiEndpoint = {
 };
 
 export const getProjectsUrl = () => {
-  return `${ApiBaseUrl}/${ApiVersion.V2}/${ApiEndpoint.Projects}`;
+  return `${ApiBaseUrl}/${ApiEndpoint.Projects}`;
 };
 
 export const getSectionsUrl = () => {
-  return `${ApiBaseUrl}/${ApiVersion.V2}/${ApiEndpoint.Sections}`;
+  return `${ApiBaseUrl}/${ApiEndpoint.Sections}`;
 };
 
 export const getTasksUrl = () => {
-  return `${ApiBaseUrl}/${ApiVersion.V2}/${ApiEndpoint.Tasks}`;
+  return `${ApiBaseUrl}/${ApiEndpoint.Tasks}`;
 };
 
 export const getCommentsUrl = (taskId?: string, projectId?: string) => {
-  return `${ApiBaseUrl}/${ApiVersion.V2}/${ApiEndpoint.Comments}${projectId ? `?project_id=${projectId}` : `?task_id=${taskId}`}`;
+  return `${ApiBaseUrl}/${ApiEndpoint.Comments}${projectId ? `?project_id=${projectId}` : `?task_id=${taskId}`}`;
 };
 
 export const getCollaboratorsOfProject = (projectId: string) => {
-  return `${ApiBaseUrl}/${ApiVersion.V2}/${ApiEndpoint.CollaboratorsOf(projectId)}`;
+  return `${ApiBaseUrl}/${ApiEndpoint.CollaboratorsOf(projectId)}`;
 };
 
 export const getProjectUrl = (projectId: string) => {
-  return `${ApiBaseUrl}/${ApiVersion.V2}/${ApiEndpoint.Project(projectId)}`;
+  return `${ApiBaseUrl}/${ApiEndpoint.Project(projectId)}`;
 };
 
 export const getSectionUrl = (sectionId: string) => {
-  return `${ApiBaseUrl}/${ApiVersion.V2}/${ApiEndpoint.Section(sectionId)}`;
+  return `${ApiBaseUrl}/${ApiEndpoint.Section(sectionId)}`;
 };
 
 export const getTaskUrl = (taskId: string) => {
-  return `${ApiBaseUrl}/${ApiVersion.V2}/${ApiEndpoint.Task(taskId)}`;
+  return `${ApiBaseUrl}/${ApiEndpoint.Task(taskId)}`;
 };
 
 export const getCommentUrl = (commentId: string) => {
-  return `${ApiBaseUrl}/${ApiVersion.V2}/${ApiEndpoint.Comment(commentId)}`;
+  return `${ApiBaseUrl}/${ApiEndpoint.Comment(commentId)}`;
 };
 
 export const getLabelsUrl = () => {
-  return `${ApiBaseUrl}/${ApiVersion.V2}/${ApiEndpoint.Labels}`;
+  return `${ApiBaseUrl}/${ApiEndpoint.Labels}`;
 };
 
 export const getSharedLabelsUrl = (omitPersonal: boolean = false) => {
-  return `${ApiBaseUrl}/${ApiVersion.V2}/${ApiEndpoint.SharedLabels}${omitPersonal ? '?omit_personal=true' : ''}`;
+  return `${ApiBaseUrl}/${ApiEndpoint.SharedLabels}${omitPersonal ? '?omit_personal=true' : ''}`;
 };
 
 export const getLabelUrl = (labelId: string) => {
-  return `${ApiBaseUrl}/${ApiVersion.V2}/${ApiEndpoint.Label(labelId)}`;
+  return `${ApiBaseUrl}/${ApiEndpoint.Label(labelId)}`;
 };
 
 export const renameSharedLabelUrl = () => {
-  return `${ApiBaseUrl}/${ApiVersion.V2}/${ApiEndpoint.RenameSharedLabel}`;
+  return `${ApiBaseUrl}/${ApiEndpoint.RenameSharedLabel}`;
 };
 
 export const removeSharedLabelUrl = () => {
-  return `${ApiBaseUrl}/${ApiVersion.V2}/${ApiEndpoint.RemoveSharedLabel}`;
+  return `${ApiBaseUrl}/${ApiEndpoint.RemoveSharedLabel}`;
 };
diff --git a/src/helpers/http.ts b/src/helpers/http.ts
index a45fc86..35c1012 100644
--- a/src/helpers/http.ts
+++ b/src/helpers/http.ts
@@ -36,7 +36,7 @@ export class HttpHelper {
         ...options,
         headers,
       };
-      this.app.getLogger().info(requestOptions);
+
       switch (method) {
         case 'GET':
           return await this.http.get(url, requestOptions);
diff --git a/src/helpers/message.ts b/src/helpers/message.ts
index a6399fd..02fda9a 100644
--- a/src/helpers/message.ts
+++ b/src/helpers/message.ts
@@ -15,13 +15,12 @@ interface GetDirectParams {
 interface SendMessageParams {
   modify: IModify;
   room: IRoom;
-  sender: IUser;
   message: string;
+  sender?: IUser;
   blocks?: Array<LayoutBlock>;
 }
 
 interface SendNotificationParams {
-  read: IRead;
   modify: IModify;
   user: IUser;
   room: IRoom;
@@ -33,7 +32,7 @@ interface SendDirectMessageParams {
   read: IRead;
   modify: IModify;
   user: IUser;
-  message: string;
+  message?: string;
   persistence: IPersistence;
   blocks?: LayoutBlock[];
 }
@@ -74,19 +73,22 @@ export async function getDirect({
 export async function sendMessage({
   modify,
   room,
-  sender,
   message,
+  sender,
   blocks,
 }: SendMessageParams): Promise<string> {
   const msg = modify
     .getCreator()
     .startMessage()
-    .setSender(sender)
     .setRoom(room)
     .setGroupable(false)
     .setParseUrls(false)
     .setText(message);
 
+  if (sender) {
+    msg.setSender(sender);
+  }
+
   if (blocks) {
     msg.setBlocks(blocks);
   }
@@ -100,28 +102,26 @@ export async function shouldSendMessage(params: NotificationParams): Promise<boo
 }
 
 export async function sendNotification({
-  read,
   modify,
   user,
   room,
   message,
   blocks,
 }: SendNotificationParams): Promise<void> {
-  const appUser = (await read.getUserReader().getAppUser()) as IUser;
-  const msg = modify.getCreator().startMessage().setSender(appUser).setRoom(room).setText(message);
+  const msg = modify.getCreator().startMessage().setRoom(room).setText(message);
 
   if (blocks) {
     msg.setBlocks(blocks);
   }
 
-  return read.getNotifier().notifyUser(user, msg.getMessage());
+  return modify.getNotifier().notifyUser(user, msg.getMessage());
 }
 
 export async function sendDirectMessage({
   read,
   modify,
   user,
-  message,
+  message = '',
   persistence,
   blocks,
 }: SendDirectMessageParams): Promise<string> {
diff --git a/src/interfaces/app.ts b/src/interfaces/app.ts
new file mode 100644
index 0000000..6301969
--- /dev/null
+++ b/src/interfaces/app.ts
@@ -0,0 +1,7 @@
+import { UIKitViewSubmitInteractionContext } from '@rocket.chat/apps-engine/definition/uikit';
+
+export interface IViewSubmitHandler {
+  run(
+    context: UIKitViewSubmitInteractionContext
+  ): Promise<{ success: boolean } | { error: { [key: string]: string } }>;
+}
diff --git a/src/interfaces/comments.ts b/src/interfaces/comments.ts
new file mode 100644
index 0000000..0f9fdb3
--- /dev/null
+++ b/src/interfaces/comments.ts
@@ -0,0 +1,15 @@
+export interface IComment {
+  content: string;
+  id: string;
+  posted_at: string;
+  project_id: any;
+  task_id: string;
+  attachment: ICommentAttachment;
+}
+
+export interface ICommentAttachment {
+  file_name: string;
+  file_type: string;
+  file_url: string;
+  resource_type: string;
+}
diff --git a/src/lib/delete/deleteItem.ts b/src/lib/delete/deleteItem.ts
deleted file mode 100644
index 5e824f9..0000000
--- a/src/lib/delete/deleteItem.ts
+++ /dev/null
@@ -1,168 +0,0 @@
-import { HttpStatusCode, IModify, IRead } from '@rocket.chat/apps-engine/definition/accessors';
-import { IRoom } from '@rocket.chat/apps-engine/definition/rooms';
-import {
-  UIKitBlockInteractionContext,
-  UIKitViewSubmitInteractionContext,
-} from '@rocket.chat/apps-engine/definition/uikit';
-
-import { TodoistApp } from '../../../TodoistApp';
-import { MiscEnum } from '../../enums/Misc';
-import { getCommentUrl, getLabelUrl, getSectionUrl, getTaskUrl } from '../../helpers/const';
-import { deleteConfirmationModal } from '../../modals/deleteConfirmationModal';
-
-interface DeleteItemParams {
-  app: TodoistApp;
-  context: UIKitViewSubmitInteractionContext;
-  room: IRoom;
-  read: IRead;
-  modify: IModify;
-  getUrl: (id?: string) => string;
-  itemType: string;
-}
-
-interface DeleteHandlerParams {
-  context: UIKitViewSubmitInteractionContext;
-  room: IRoom;
-  read: IRead;
-  modify: IModify;
-  app?: TodoistApp;
-}
-
-export async function deleteItem({
-  app,
-  context,
-  room,
-  read,
-  modify,
-  getUrl,
-  itemType,
-}: DeleteItemParams) {
-  const data = context.getInteractionData();
-  const itemId = data.view.submit!.value;
-  const user = data.user;
-  const roomId = room.id;
-  let roomFromId = await read.getRoomReader().getById(roomId);
-  if (!room) room = roomFromId!;
-  try {
-    const response = await app.getHttpHelperInstance().delete(user, getUrl(itemId));
-
-    if (response.statusCode === HttpStatusCode.NO_CONTENT) {
-      const successMessage = modify
-        .getCreator()
-        .startMessage()
-        .setText(`✅ ${itemType} deleted successfully!`)
-        .setRoom(room);
-      await modify.getNotifier().notifyUser(user, successMessage.getMessage());
-    } else {
-      throw new Error(response.data?.err || 'Unknown error occurred');
-    }
-  } catch (error) {
-    const errorMessage = modify
-      .getCreator()
-      .startMessage()
-      .setText(`❗️ Unable to delete ${itemType}! \nError: ${error.message}`)
-      .setRoom(room);
-    await modify.getNotifier().notifyUser(user, errorMessage.getMessage());
-  }
-}
-
-export async function deleteTask(params: DeleteHandlerParams) {
-  return deleteItem({
-    ...params,
-    getUrl: getTaskUrl,
-    itemType: 'Task',
-    app: params.app!,
-  });
-}
-
-export async function deleteSection(params: DeleteHandlerParams) {
-  return deleteItem({
-    ...params,
-    getUrl: getSectionUrl,
-    itemType: 'Section',
-    app: params.app!,
-  });
-}
-
-export async function deleteLabel(params: DeleteHandlerParams) {
-  return deleteItem({
-    ...params,
-    getUrl: getLabelUrl,
-    itemType: 'Label',
-    app: params.app!,
-  });
-}
-
-export async function deleteComment(params: DeleteHandlerParams) {
-  return deleteItem({
-    ...params,
-    getUrl: getCommentUrl,
-    itemType: 'Comment',
-    app: params.app!,
-  });
-}
-
-export async function handleDeleteAction(
-  app: TodoistApp,
-  context: UIKitBlockInteractionContext,
-  modify: IModify
-): Promise<void> {
-  const data = context.getInteractionData();
-  const actionId = data.actionId;
-  const itemId = data.value!;
-  const user = data.user;
-  const roomId = data.room!.id;
-
-  try {
-    let itemType: string;
-    let itemName: string;
-
-    // Get item details based on action type
-    switch (actionId) {
-      case MiscEnum.DELETE_TASK_ACTION_ID:
-        itemType = 'Task';
-        const taskResponse = await app.getHttpHelperInstance().get(user, getTaskUrl(itemId));
-        itemName = taskResponse.data.content;
-        break;
-
-      case MiscEnum.DELETE_SECTION_ACTION_ID:
-        itemType = 'Section';
-        const sectionResponse = await app.getHttpHelperInstance().get(user, getSectionUrl(itemId));
-        itemName = sectionResponse.data.name;
-        break;
-
-      case MiscEnum.DELETE_LABEL_ACTION_ID:
-        itemType = 'Label';
-        const labelResponse = await app.getHttpHelperInstance().get(user, getLabelUrl(itemId));
-        itemName = labelResponse.data.name;
-        break;
-
-      case MiscEnum.DELETE_COMMENT_ACTION_ID:
-        itemType = 'Comment';
-        const commentResponse = await app.getHttpHelperInstance().get(user, getCommentUrl(itemId));
-        itemName = commentResponse.data.content;
-        break;
-
-      default:
-        throw new Error('Unknown delete action');
-    }
-
-    // Show confirmation modal
-    const modal = await deleteConfirmationModal({
-      itemType,
-      itemName,
-      itemId,
-      actionId,
-      roomId,
-    });
-
-    await modify.getUiController().openSurfaceView(modal, data, user);
-  } catch (error) {
-    const msg = modify
-      .getCreator()
-      .startMessage()
-      .setText(`Error opening delete confirmation: ${error.message}`)
-      .setRoom(context.getInteractionData().room!);
-    await modify.getNotifier().notifyUser(user, msg.getMessage());
-  }
-}
diff --git a/src/lib/fetch/fetchComments.ts b/src/lib/fetch/fetchComments.ts
deleted file mode 100644
index c2b7db7..0000000
--- a/src/lib/fetch/fetchComments.ts
+++ /dev/null
@@ -1,105 +0,0 @@
-import { HttpStatusCode, IModify } from '@rocket.chat/apps-engine/definition/accessors';
-import { UIKitBlockInteractionContext } from '@rocket.chat/apps-engine/definition/uikit';
-import { LayoutBlock } from '@rocket.chat/ui-kit';
-
-import { TodoistApp } from '../../../TodoistApp';
-import { MiscEnum } from '../../enums/Misc';
-import {
-  getActionsBlock,
-  getButton,
-  getContextBlock,
-  getSectionBlock,
-} from '../../helpers/blockBuilder';
-import { getCommentsUrl } from '../../helpers/const';
-
-interface IComment {
-  id: string;
-  content: string;
-  posted_at: string;
-  attachment?: {
-    file_name: string;
-  };
-}
-
-export async function getComments(
-  app: TodoistApp,
-  modify: IModify,
-  context: UIKitBlockInteractionContext
-): Promise<void> {
-  const data = context.getInteractionData();
-  const user = data.user;
-  const room = data.room;
-  const itemId = data.value;
-  const blockId = data.blockId;
-
-  const isProject = blockId.includes('project');
-  const url = getCommentsUrl(isProject ? undefined : itemId, isProject ? itemId : undefined);
-
-  const response = await app.getHttpHelperInstance().get(user, url);
-
-  if (response.statusCode !== HttpStatusCode.OK) {
-    const msg = modify
-      .getCreator()
-      .startMessage()
-      .setText(`❗️ Unable to retrieve comments! \n Error ${JSON.stringify(response)}`)
-      .setRoom(room!);
-    await modify.getNotifier().notifyUser(user, msg.getMessage());
-    return;
-  }
-
-  if (!response.data || response.data.length === 0) {
-    const msg = modify
-      .getCreator()
-      .startMessage()
-      .setText(
-        `No comments found on ${isProject ? 'project' : 'task'} ${itemId}. Create one using the Todoist app or website.`
-      )
-      .setRoom(room!);
-    await modify.getNotifier().notifyUser(user, msg.getMessage());
-    return;
-  }
-
-  const builder = modify.getCreator().startMessage().setRoom(room!);
-  const blocks = (
-    await Promise.all(response.data.map((comment: IComment) => createCommentSection(comment)))
-  ).reduce((acc, val) => acc.concat(val), []) as LayoutBlock[];
-
-  builder.setBlocks(blocks);
-  await modify.getNotifier().notifyUser(user, builder.getMessage());
-}
-
-async function createCommentSection(comment: IComment): Promise<LayoutBlock[]> {
-  const blocks: LayoutBlock[] = [];
-
-  const commentContentBlock = getSectionBlock(comment.content);
-  const commentContextBlock = getContextBlock(
-    `Posted: ${new Date(comment.posted_at).toLocaleString()}`
-  );
-  blocks.push(commentContentBlock, commentContextBlock);
-
-  const shareButton = getButton({
-    labelText: MiscEnum.SHARE_COMMENT_BUTTON,
-    blockId: MiscEnum.COMMENT_ACTIONS_BLOCK,
-    actionId: MiscEnum.SHARE_COMMENT_ACTION_ID,
-    value: `${comment.id}`,
-    style: 'primary',
-  });
-
-  const deleteButton = getButton({
-    labelText: MiscEnum.DELETE_COMMENT_BUTTON,
-    blockId: MiscEnum.COMMENT_ACTIONS_BLOCK,
-    actionId: MiscEnum.DELETE_COMMENT_ACTION_ID,
-    value: `${comment.id}`,
-    style: 'danger',
-  });
-
-  const actionBlock = getActionsBlock(MiscEnum.COMMENT_ACTIONS_BLOCK, [shareButton, deleteButton]);
-  blocks.push(actionBlock);
-
-  if (comment.attachment) {
-    const attachmentBlock = getSectionBlock(`📎 Attachment: ${comment.attachment.file_name}`);
-    blocks.push(attachmentBlock);
-  }
-
-  return blocks;
-}
diff --git a/src/lib/share/shareComment.ts b/src/lib/share/shareComment.ts
deleted file mode 100644
index 80c8d06..0000000
--- a/src/lib/share/shareComment.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-import { getCommentUrl } from '../../helpers/const';
-import { shareItem } from './shareItem';
-
-function formatMessage(response) {
-  const attachment = response.attachment
-    ? `| Attachment: [${response.attachment.file_name}](${response.attachment.file_url})`
-    : '';
-  return `${response.content} | Posted: ${new Date(response.posted_at).toLocaleString()} ${attachment}`;
-}
-
-export async function shareComment(params) {
-  return shareItem({
-    ...params,
-    getUrl: getCommentUrl,
-    formatMessage: formatMessage,
-  });
-}
diff --git a/src/lib/share/shareItem.ts b/src/lib/share/shareItem.ts
deleted file mode 100644
index d9f9eb6..0000000
--- a/src/lib/share/shareItem.ts
+++ /dev/null
@@ -1,48 +0,0 @@
-import { HttpStatusCode, IModify } from '@rocket.chat/apps-engine/definition/accessors';
-import { UIKitBlockInteractionContext } from '@rocket.chat/apps-engine/definition/uikit';
-
-import { TodoistApp } from '../../../TodoistApp';
-import { HttpMethod } from '../../helpers/http';
-
-interface ShareItemParams {
-  app: TodoistApp;
-  context: UIKitBlockInteractionContext;
-  modify: IModify;
-  getUrl: (id?: string) => string;
-  formatMessage: (response: any) => string;
-  method?: HttpMethod;
-}
-
-export async function shareItem({
-  app,
-  context,
-  modify,
-  getUrl,
-  formatMessage,
-  method = 'GET',
-}: ShareItemParams) {
-  const data = context.getInteractionData();
-  const itemId = data.value;
-  const user = data.user;
-  const room = data.room;
-  try {
-    const response = await app.getHttpHelperInstance().call(user, method, getUrl(itemId));
-
-    if (response.statusCode === HttpStatusCode.OK) {
-      const message = formatMessage(response.data);
-      const textSender = modify.getCreator().startMessage().setText(message);
-
-      if (room) {
-        textSender.setRoom(room);
-      }
-
-      await modify.getCreator().finish(textSender);
-    } else {
-      throw new Error(response.data?.err || 'Unknown error occurred');
-    }
-  } catch (error) {
-    const errorMessage = `❗️ Unable to share item! \nError: ${error.message}`;
-    const textSender = modify.getCreator().startMessage().setText(errorMessage).setRoom(room!);
-    await modify.getCreator().finish(textSender);
-  }
-}
diff --git a/src/lib/share/shareLabel.ts b/src/lib/share/shareLabel.ts
deleted file mode 100644
index e693bb9..0000000
--- a/src/lib/share/shareLabel.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-import { getLabelUrl } from '../../helpers/const';
-import { shareItem } from './shareItem';
-
-export async function shareLabel(params) {
-  return shareItem({
-    ...params,
-    getUrl: getLabelUrl,
-    formatMessage: (response) => {
-      return `Label: ${response.name} | Color: ${response.color} | Order: ${response.order} | Favorite: ${response.is_favorite ? 'Yes' : 'No'}`;
-    },
-  });
-}
diff --git a/src/lib/share/shareProject.ts b/src/lib/share/shareProject.ts
deleted file mode 100644
index b038886..0000000
--- a/src/lib/share/shareProject.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-import { getProjectUrl } from '../../helpers/const';
-import { shareItem } from './shareItem';
-
-export async function shareProject(params) {
-  return shareItem({
-    ...params,
-    getUrl: getProjectUrl,
-    formatMessage: (response) => {
-      return `[${response.name}](${response.url}) | Comments: ${response.comment_count} | Color: ${response.color} | Favourite: ${response.is_favorite ? 'Yes' : 'No'}`;
-    },
-  });
-}
diff --git a/src/lib/share/shareSection.ts b/src/lib/share/shareSection.ts
deleted file mode 100644
index 6516327..0000000
--- a/src/lib/share/shareSection.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-import { getSectionUrl } from '../../helpers/const';
-import { shareItem } from './shareItem';
-
-export async function shareSection(params) {
-  return shareItem({
-    ...params,
-    getUrl: getSectionUrl,
-    formatMessage: (response) => {
-      return `Section: ${response.name} | Project ID: ${response.project_id} | Order: ${response.order}`;
-    },
-  });
-}
diff --git a/src/lib/share/shareTask.ts b/src/lib/share/shareTask.ts
deleted file mode 100644
index 1004124..0000000
--- a/src/lib/share/shareTask.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import { getTaskUrl } from '../../helpers/const';
-import { shareItem } from './shareItem';
-
-export async function shareTask(params) {
-  return shareItem({
-    ...params,
-    getUrl: getTaskUrl,
-    formatMessage: (response) => {
-      const dueInfo = response.due
-        ? `Due: ${response.due.string || response.due.date}`
-        : 'No due date';
-
-      return `[${response.content}](${response.url}) | ${dueInfo} | Priority: ${response.priority} | Labels: ${response.labels.join(', ')} | Comments: ${response.comment_count}`;
-    },
-  });
-}
diff --git a/src/modals/createTaskModal.ts b/src/modals/createTaskModal.ts
index 1aef35f..53f625e 100644
--- a/src/modals/createTaskModal.ts
+++ b/src/modals/createTaskModal.ts
@@ -35,6 +35,7 @@ export async function createTaskModal({
     getButton({
       labelText: ModalsEnum.CREATE_TASK_MODAL_SUBMIT_BUTTON_LABEL,
       style: 'success',
+      value: 'submit',
     }),
   ]);
 
diff --git a/src/modals/deleteConfirmationModal.ts b/src/modals/deleteConfirmationModal.ts
index cafb28f..1e07aa0 100644
--- a/src/modals/deleteConfirmationModal.ts
+++ b/src/modals/deleteConfirmationModal.ts
@@ -5,24 +5,19 @@ import { ModalsEnum } from '../enums/Modals';
 import { getButton, getSectionBlock } from '../helpers/blockBuilder';
 
 export async function deleteConfirmationModal({
-  itemType,
-  itemName,
   itemId,
   actionId,
   roomId,
 }: {
-  itemType: string;
-  itemName: string;
   itemId: string;
   actionId: string;
   roomId: string;
 }): Promise<IUIKitSurfaceViewParam> {
+  const itemType = actionId.split('delete-')[1];
   const modalKey = `DELETE_${itemType.toUpperCase()}` as keyof typeof ModalsEnum;
   const viewId = ModalsEnum[modalKey] + `#${roomId}`;
 
-  const confirmationMessage = getSectionBlock(
-    `Are you sure you want to delete ${itemType}: ${itemName}?`
-  );
+  const confirmationMessage = getSectionBlock(`Are you sure you want to delete the ${itemType}?`);
 
   const [closeButton, submitButton] = await Promise.all([
     getButton({
diff --git a/src/services/CommentService.ts b/src/services/CommentService.ts
new file mode 100644
index 0000000..e3c148b
--- /dev/null
+++ b/src/services/CommentService.ts
@@ -0,0 +1,67 @@
+import { IUser } from '@rocket.chat/apps-engine/definition/users';
+
+import { TodoistApp } from '../../TodoistApp';
+import { getCommentUrl, getCommentsUrl } from '../helpers/const';
+import { IComment } from '../interfaces/comments';
+
+export class CommentService {
+  constructor(private app: TodoistApp) {}
+
+  public async fetch(
+    user: IUser,
+    commentId?: string,
+    taskId?: string,
+    projecId?: string
+  ): Promise<IComment[]> {
+    try {
+      const url = commentId ? getCommentUrl(commentId) : getCommentsUrl(taskId, projecId);
+      const response = await this.app.getHttpHelperInstance().get(user, url);
+      if (response.statusCode !== 200) {
+        throw new Error(`Failed to fetch comments: ${response.content}`);
+      }
+      const comments: IComment[] = Array.isArray(response.data) ? response.data : [response.data];
+      this.validate(comments);
+      return comments;
+    } catch (error) {
+      this.app.getLogger().error(`Error in CommentService.fetchComments: ${error.message}`);
+      throw new Error('Could not retrieve comments. Please try again later.');
+    }
+  }
+
+  public async create(user: IUser, commentData: IComment): Promise<IComment> {
+    try {
+      const response = await this.app
+        .getHttpHelperInstance()
+        .post(user, getCommentsUrl(), commentData);
+      if (response.statusCode !== 200) {
+        throw new Error(`Failed to create comment: ${response.content}`);
+      }
+      return response.data;
+    } catch (error) {
+      this.app.getLogger().error(`Error in CommentService.createComment: ${error.message}`);
+      throw new Error('Could not create comment. Please try again later.');
+    }
+  }
+
+  public async delete(user: IUser, commentId: string): Promise<void> {
+    try {
+      const response = await this.app
+        .getHttpHelperInstance()
+        .delete(user, `${getCommentsUrl()}/${commentId}`);
+      if (response.statusCode !== 204) {
+        throw new Error(`Failed to delete comment: ${response.content}`);
+      }
+    } catch (error) {
+      this.app.getLogger().error(`Error in CommentService.deleteComment: ${error.message}`);
+      throw new Error('Could not delete comment. Please try again later.');
+    }
+  }
+
+  private validate(comments: IComment[]): void {
+    comments.forEach((comment) => {
+      if (!comment.id || !comment.content) {
+        throw new Error(`Invalid comment structure: ${JSON.stringify(comment)}`);
+      }
+    });
+  }
+}
diff --git a/src/services/LabelService.ts b/src/services/LabelService.ts
new file mode 100644
index 0000000..7f43613
--- /dev/null
+++ b/src/services/LabelService.ts
@@ -0,0 +1,51 @@
+import { IHttpResponse } from '@rocket.chat/apps-engine/definition/accessors';
+import { IUser } from '@rocket.chat/apps-engine/definition/users';
+
+import { TodoistApp } from '../../TodoistApp';
+import { getLabelsUrl } from '../helpers/const';
+import { ILabel } from '../interfaces/labels';
+
+export class LabelService {
+  constructor(private app: TodoistApp) {}
+
+  public async fetch(user: IUser): Promise<ILabel[]> {
+    try {
+      const response: IHttpResponse = await this.app
+        .getHttpHelperInstance()
+        .get(user, getLabelsUrl());
+
+      if (response.statusCode !== 200) {
+        throw new Error(`Failed to fetch labels: ${response.content}`);
+      }
+
+      const labels: ILabel[] = response.data;
+      this.validate(labels);
+      return labels;
+    } catch (error) {
+      this.app.getLogger().error(`Error in LabelService.fetchLabels: ${error.message}`);
+      throw new Error('Could not retrieve labels. Please try again later.');
+    }
+  }
+
+  public async delete(user: IUser, labelId: string): Promise<void> {
+    try {
+      const response: IHttpResponse = await this.app
+        .getHttpHelperInstance()
+        .delete(user, `${getLabelsUrl()}/${labelId}`);
+      if (response.statusCode !== 204) {
+        throw new Error(`Failed to delete label: ${response.content}`);
+      }
+    } catch (error) {
+      this.app.getLogger().error(`Error in LabelService.deleteLabel: ${error.message}`);
+      throw new Error('Could not delete label. Please try again later.');
+    }
+  }
+
+  private validate(labels: ILabel[]): void {
+    labels.forEach((label) => {
+      if (!label.id || !label.name || !label.color) {
+        throw new Error(`Invalid label structure: ${JSON.stringify(label)}`);
+      }
+    });
+  }
+}
diff --git a/src/services/ProjectService.ts b/src/services/ProjectService.ts
new file mode 100644
index 0000000..b7faa86
--- /dev/null
+++ b/src/services/ProjectService.ts
@@ -0,0 +1,35 @@
+import { IUser } from '@rocket.chat/apps-engine/definition/users';
+
+import { TodoistApp } from '../../TodoistApp';
+import { getProjectUrl, getProjectsUrl } from '../helpers/const';
+import { IProject } from '../interfaces/projects';
+
+export class ProjectService {
+  constructor(private readonly app: TodoistApp) {}
+
+  public async fetch(user: IUser, projectId?: string): Promise<IProject[]> {
+    try {
+      const url = projectId ? getProjectUrl(projectId) : getProjectsUrl();
+      const response = await this.app.getHttpHelperInstance().get(user, url);
+
+      if (response.statusCode !== 200) {
+        throw new Error(`Failed to fetch projects: ${response.content}`);
+      }
+
+      const projects: IProject[] = Array.isArray(response.data) ? response.data : [response.data];
+      this.validateProjects(projects);
+      return projects;
+    } catch (error) {
+      this.app.getLogger().error(`Error in ProjectService.fetch: ${error.message}`);
+      throw new Error('Could not retrieve projects. Please try again later.');
+    }
+  }
+
+  private validateProjects(projects: IProject[]): void {
+    projects.forEach((project) => {
+      if (!project.id || !project.name) {
+        throw new Error(`Invalid project structure: ${JSON.stringify(project)}`);
+      }
+    });
+  }
+}
diff --git a/src/services/SectionService.ts b/src/services/SectionService.ts
new file mode 100644
index 0000000..5c8878b
--- /dev/null
+++ b/src/services/SectionService.ts
@@ -0,0 +1,49 @@
+import { IUser } from '@rocket.chat/apps-engine/definition/users';
+
+import { TodoistApp } from '../../TodoistApp';
+import { getSectionUrl, getSectionsUrl } from '../helpers/const';
+import { ISection } from '../interfaces/sections';
+
+export class SectionService {
+  constructor(private app: TodoistApp) {}
+
+  public async fetch(user: IUser, sectionId?: string): Promise<ISection[]> {
+    try {
+      const url = sectionId ? getSectionUrl(sectionId) : getSectionsUrl();
+      const response = await this.app.getHttpHelperInstance().get(user, url);
+
+      if (response.statusCode !== 200) {
+        throw new Error(`Failed to fetch sections: ${response.content}`);
+      }
+
+      const sections: ISection[] = Array.isArray(response.data) ? response.data : [response.data];
+      this.validate(sections);
+      return sections;
+    } catch (error) {
+      this.app.getLogger().error(`Error in SectionService.fetchSections: ${error.message}`);
+      throw new Error('Could not retrieve sections. Please try again later.');
+    }
+  }
+
+  public async delete(user: IUser, sectionId: string): Promise<void> {
+    try {
+      const response = await this.app
+        .getHttpHelperInstance()
+        .delete(user, `${getSectionsUrl()}/${sectionId}`);
+      if (response.statusCode !== 204) {
+        throw new Error(`Failed to delete section: ${response.content}`);
+      }
+    } catch (error) {
+      this.app.getLogger().error(`Error in SectionService.deleteSection: ${error.message}`);
+      throw new Error('Could not delete section. Please try again later.');
+    }
+  }
+
+  private validate(sections: ISection[]): void {
+    sections.forEach((section) => {
+      if (!section.id || !section.name) {
+        throw new Error(`Invalid section structure: ${JSON.stringify(section)}`);
+      }
+    });
+  }
+}
diff --git a/src/services/SharedLabelService.ts b/src/services/SharedLabelService.ts
new file mode 100644
index 0000000..eaafa3f
--- /dev/null
+++ b/src/services/SharedLabelService.ts
@@ -0,0 +1,51 @@
+import { IHttpResponse } from '@rocket.chat/apps-engine/definition/accessors';
+import { IUser } from '@rocket.chat/apps-engine/definition/users';
+
+import { TodoistApp } from '../../TodoistApp';
+import { getSharedLabelsUrl } from '../helpers/const';
+import { ILabel } from '../interfaces/labels';
+
+export class SharedLabelService {
+  constructor(private app: TodoistApp) {}
+
+  public async fetch(user: IUser): Promise<ILabel[]> {
+    try {
+      const response: IHttpResponse = await this.app
+        .getHttpHelperInstance()
+        .get(user, getSharedLabelsUrl(true));
+
+      if (response.statusCode !== 200) {
+        throw new Error(`Failed to fetch labels: ${response.content}`);
+      }
+
+      const labels: ILabel[] = response.data;
+      this.validate(labels);
+      return labels;
+    } catch (error) {
+      this.app.getLogger().error(`Error in SharedLabelService.fetchLabels: ${error.message}`);
+      throw new Error('Could not retrieve shared labels. Please try again later.');
+    }
+  }
+
+  public async delete(user: IUser, labelId: string): Promise<void> {
+    try {
+      const response: IHttpResponse = await this.app
+        .getHttpHelperInstance()
+        .delete(user, `${getSharedLabelsUrl(true)}/${labelId}`);
+      if (response.statusCode !== 200) {
+        throw new Error(`Failed to delete shared label: ${response.content}`);
+      }
+    } catch (error) {
+      this.app.getLogger().error(`Error in SharedLabelService.deleteSharedLabel: ${error.message}`);
+      throw new Error('Could not delete shared label. Please try again later.');
+    }
+  }
+
+  private validate(labels: ILabel[]): void {
+    labels.forEach((label) => {
+      if (!label.id || !label.name || !label.color) {
+        throw new Error(`Invalid label structure: ${JSON.stringify(label)}`);
+      }
+    });
+  }
+}
diff --git a/src/services/TaskService.ts b/src/services/TaskService.ts
new file mode 100644
index 0000000..ef6b4a5
--- /dev/null
+++ b/src/services/TaskService.ts
@@ -0,0 +1,78 @@
+import { IHttpResponse } from '@rocket.chat/apps-engine/definition/accessors';
+import { IUser } from '@rocket.chat/apps-engine/definition/users';
+
+import { TodoistApp } from '../../TodoistApp';
+import { getTaskUrl, getTasksUrl } from '../helpers/const';
+import { ITask } from '../interfaces/tasks';
+
+export class TaskService {
+  constructor(private app: TodoistApp) {}
+
+  public async fetch(user: IUser, taskId?: string): Promise<ITask[]> {
+    try {
+      const url = taskId ? getTaskUrl(taskId) : getTasksUrl();
+      const response: IHttpResponse = await this.app.getHttpHelperInstance().get(user, url);
+      if (response.statusCode !== 200) {
+        throw new Error(`Failed to fetch tasks: ${response.content}`);
+      }
+      const tasks: ITask[] = Array.isArray(response.data) ? response.data : [response.data];
+      this.validate(tasks);
+      return tasks;
+    } catch (error) {
+      this.app.getLogger().error(`Error in TaskService.fetchTasks: ${error.message}`);
+      throw new Error('Could not retrieve tasks. Please try again later.');
+    }
+  }
+
+  public async create(user: IUser, taskData: ITask): Promise<ITask> {
+    try {
+      const response: IHttpResponse = await this.app
+        .getHttpHelperInstance()
+        .post(user, getTasksUrl(), { data: taskData });
+      if (response.statusCode !== 200) {
+        throw new Error(`Failed to create task: ${response.content}`);
+      }
+      return response.data;
+    } catch (error) {
+      this.app.getLogger().error(`Error in TaskService.createTask: ${error.message}`);
+      throw new Error('Could not create task. Please try again later.');
+    }
+  }
+
+  public async update(user: IUser, taskId: string, taskData: ITask): Promise<ITask> {
+    try {
+      const response: IHttpResponse = await this.app
+        .getHttpHelperInstance()
+        .put(user, `${getTasksUrl()}/${taskId}`, taskData);
+      if (response.statusCode !== 200) {
+        throw new Error(`Failed to update task: ${response.content}`);
+      }
+      return response.data;
+    } catch (error) {
+      this.app.getLogger().error(`Error in TaskService.updateTask: ${error.message}`);
+      throw new Error('Could not update task. Please try again later.');
+    }
+  }
+
+  public async delete(user: IUser, taskId: string): Promise<void> {
+    try {
+      const response: IHttpResponse = await this.app
+        .getHttpHelperInstance()
+        .delete(user, getTaskUrl(taskId));
+      if (response.statusCode !== 204) {
+        throw new Error(`Failed to delete task: ${response.content}`);
+      }
+    } catch (error) {
+      this.app.getLogger().error(`Error in TaskService.deleteTask: ${error.message}`);
+      throw new Error('Could not delete task. Please try again later.');
+    }
+  }
+
+  private validate(tasks: ITask[]): void {
+    tasks.forEach((task) => {
+      if (!task.id || !task.content) {
+        throw new Error(`Invalid task structure: ${JSON.stringify(task)}`);
+      }
+    });
+  }
+}
